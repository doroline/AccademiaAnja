[{"/Users/danilo/Documents/projects/AccademiaAnja/src/index.js":"1","/Users/danilo/Documents/projects/AccademiaAnja/src/reportWebVitals.js":"2","/Users/danilo/Documents/projects/AccademiaAnja/src/firebase-config.js":"3","/Users/danilo/Documents/projects/AccademiaAnja/src/costanti.js":"4","/Users/danilo/Documents/projects/AccademiaAnja/src/components/Menu.js":"5","/Users/danilo/Documents/projects/AccademiaAnja/src/global-styles.js":"6","/Users/danilo/Documents/projects/AccademiaAnja/src/containers/App.js":"7","/Users/danilo/Documents/projects/AccademiaAnja/src/containers/Home.js":"8","/Users/danilo/Documents/projects/AccademiaAnja/src/components/NuoviCorsi.js":"9","/Users/danilo/Documents/projects/AccademiaAnja/src/containers/Master.js":"10","/Users/danilo/Documents/projects/AccademiaAnja/src/containers/Corsi.js":"11","/Users/danilo/Documents/projects/AccademiaAnja/src/containers/Contatti.js":"12","/Users/danilo/Documents/projects/AccademiaAnja/src/containers/PrimoAccesso.js":"13","/Users/danilo/Documents/projects/AccademiaAnja/src/components/Footer.js":"14","/Users/danilo/Documents/projects/AccademiaAnja/src/containers/Certificazioni.js":"15","/Users/danilo/Documents/projects/AccademiaAnja/src/containers/Offerte.js":"16","/Users/danilo/Documents/projects/AccademiaAnja/src/containers/DettaglioCorso.js":"17"},{"size":544,"mtime":1610614819682,"results":"18","hashOfConfig":"19"},{"size":362,"mtime":1608628662543,"results":"20","hashOfConfig":"19"},{"size":435,"mtime":1608634388296,"results":"21","hashOfConfig":"19"},{"size":258,"mtime":1610452708764,"results":"22","hashOfConfig":"19"},{"size":3523,"mtime":1609760036750,"results":"23","hashOfConfig":"19"},{"size":2680,"mtime":1611074372999,"results":"24","hashOfConfig":"19"},{"size":10168,"mtime":1610468549936,"results":"25","hashOfConfig":"19"},{"size":1503,"mtime":1610380066629,"results":"26","hashOfConfig":"19"},{"size":2432,"mtime":1610528338410,"results":"27","hashOfConfig":"19"},{"size":3275,"mtime":1610536280368,"results":"28","hashOfConfig":"19"},{"size":2406,"mtime":1611073404673,"results":"29","hashOfConfig":"19"},{"size":1539,"mtime":1609869535738,"results":"30","hashOfConfig":"19"},{"size":969,"mtime":1609433047539,"results":"31","hashOfConfig":"19"},{"size":1276,"mtime":1609682712894,"results":"32","hashOfConfig":"19"},{"size":628,"mtime":1609869627056,"results":"33","hashOfConfig":"19"},{"size":690,"mtime":1609869612771,"results":"34","hashOfConfig":"19"},{"size":4716,"mtime":1611074522535,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"fi432f",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/danilo/Documents/projects/AccademiaAnja/src/index.js",[],["78","79"],"/Users/danilo/Documents/projects/AccademiaAnja/src/reportWebVitals.js",[],"/Users/danilo/Documents/projects/AccademiaAnja/src/firebase-config.js",[],"/Users/danilo/Documents/projects/AccademiaAnja/src/costanti.js",[],"/Users/danilo/Documents/projects/AccademiaAnja/src/components/Menu.js",["80","81","82","83"],"import { useState } from \"react\";\n\nimport {\n  useHistory,\n  useLocation,\n} from \"react-router-dom\";\nimport {ROTTE} from '../costanti';\n\nimport SwipeableDrawer from \"@material-ui/core/SwipeableDrawer\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Switch from \"@material-ui/core/Switch\";\nimport Button from '@material-ui/core/Button';\n\n\nconst Menu = (props) => {\n  // costanti per gli Hook di Routing\n const listaRottePrecedenti = useHistory();\n const rottaCorrente = useLocation();\n\n  const cambiaRotta = (nuovaRotta) => {\n    listaRottePrecedenti.push(nuovaRotta);\n    props.apriChiudiMenu();\n  };\n\n  return (\n    <>\n      {/* \n        qui inizia il menu, con l'elemento SwipeableDrawer che contiene tutti i bottoni con i nomi delle sezione della mia APP \n        anchor indica la posizione da cui il menu si aprirà\n        open indica se il menu è aperto o chiuso\n        onClose e onOpen sono eventi legati allo swipe dell'utente (in generale per noi è importante invocare una sola funzione: apriChiudiMenu)\n      */}\n      <SwipeableDrawer\n        anchor=\"left\"\n        open={props.menuVisibile}\n        onClose={() => props.apriChiudiMenu()}\n        onOpen={() => props.apriChiudiMenu()} \n      >\n        {/* List svolge il ruolo di <ul> e ListItem quello di <li>: in questo caso potrei utilizzare una costante ed eseguire un .map per ciclarmi tutte le pagine della mia app che voglio elencare */}\n        <List>\n        <ListItem button key=\"ciao\">\n            {props.utente.loggato && (\n                <div>\n                  Ciao <br />{props.utente.nome}{\" \"}\n                  <img src={props.utente.foto} className=\"fotoUtente\" />\n                </div>\n            )}\n          </ListItem>\n  \n          <ListItem button key=\"Home\" onClick={()=> cambiaRotta(ROTTE.HOME)}>\n            <ListItemText primary=\"Home\" />\n          </ListItem>\n          <ListItem button key=\"I Corsi\" onClick={()=> cambiaRotta(ROTTE.MASTER)}>\n            <ListItemText primary=\"I Master\" />\n          </ListItem>\n          <ListItem button key=\"I Corsi\" onClick={()=> cambiaRotta(ROTTE.CORSI)}>\n            <ListItemText primary=\"Tutti i Corsi\" />\n          </ListItem>\n          <ListItem button key=\"Contatti\" onClick={() => cambiaRotta(ROTTE.CONTATTI)}>\n            <ListItemText primary=\"Contatti\" />\n          </ListItem>\n          <ListItem button key=\"Certificazioni\" onClick={() => cambiaRotta(ROTTE.CERTIFICAZIONI)}>\n            <ListItemText primary=\"Certificazioni\" />\n          </ListItem>\n          {props.allievo && ( <ListItem button key=\"Offerte di lavoro\" onClick={() => cambiaRotta(ROTTE.OFFERTE)} className=\"btnOfferte\">\n            <ListItemText primary=\"Offerte di lavoro\" />\n          </ListItem>)}\n          {!props.allievo && <div className=\"avvisoAllievo\">Se sei un nostro ex allievo, accedi con Google, e poi contattaci via email per comunicarci della tua iscrizione all'app, dopo una verifica, ti verrà attivata l'opzione per visualizzare tutte le <strong>offerte di lavoro dedicate ai nostri ex allievi.</strong></div>}\n\n         \n        </List>\n        {!props.utente.loggato && (\n          <Button onClick={() => props.loggatiConGoogle()}>Accedi con Google</Button>\n        )}\n        {props.utente.loggato && (\n          <div>\n            <Button onClick={() => props.logout()}>ESCI</Button>\n          </div>\n        )}\n      </SwipeableDrawer>\n    </>\n  );\n};\n\nexport default Menu;\n","/Users/danilo/Documents/projects/AccademiaAnja/src/global-styles.js",[],"/Users/danilo/Documents/projects/AccademiaAnja/src/containers/App.js",["84","85","86"],"import { useState, useEffect, createContext } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Home from \"./Home\";\nimport Corsi from \"./Corsi\";\nimport DettaglioCorso from \"./DettaglioCorso\";\nimport Master from \"./Master\";\nimport Contatti from \"./Contatti\";\nimport Certificazioni from \"./Certificazioni\";\nimport Offerte from './Offerte';\nimport Footer from \"../components/Footer\";\nimport Logo from \"../img/logo.jpg\";\n\n// importiamo gli elementi di material ui che cxi occorrono : il menu vero e proprio e gli elementi list, list item e list text per stilizzare i bottoni che avremo nel menu\nimport Menu from \"../components/Menu\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\nimport styled from \"styled-components\";\nimport firebase from \"firebase\";\nimport firebaseConfig from \"../firebase-config\";\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useHistory,\n} from \"react-router-dom\";\n\nimport { ROTTE } from \"../costanti\";\n\nfirebase.initializeApp(firebaseConfig);\n\nfunction onUtenteLoggato(utenteLoggatoCallBack) {\n  // eseguirà questo codice del return, interno al metodo, quando l'utente si sarà loggato o sloggato\n  return firebase.auth().onAuthStateChanged((utenteParametro) => {\n    if (utenteParametro) {\n      // così vuol dire che è loggato\n      console.log(\"utenteParametro: \", utenteParametro); // cosi possiamo vedere quali dati ci passa google\n      utenteLoggatoCallBack({\n        loggato: true,\n        nome: utenteParametro.displayName,\n        email: utenteParametro.email,\n        foto: utenteParametro.photoURL,\n        uid: utenteParametro.uid,\n      });\n    } else {\n      utenteLoggatoCallBack({\n        loggato: false,\n      });\n    }\n  });\n}\n\nconst auth = firebase.auth();\nconst provider = new firebase.auth.GoogleAuthProvider();\n\nconst loggatiConGoogle = () => {\n  auth.signInWithPopup(provider);\n};\n\nconst logout = () => {\n  firebase.auth().signOut();\n};\n\nexport const corsiContext = createContext();\n\nfunction App() {\n  const [accesso, setAccesso] = useState(false);\n  const [nodoPrincipale, setNodoPrincipale,] = useState([]); // qui definisco l'array che conterrà tutti i nodi principali trasformati in array\n  const [tabella, setTabella] = useState({}); // qui creo un oggetto che si riempirà con tutti i valori della tabella del db\n\n  const [pagina, setPagina] = useState('');\n\n  useEffect(() => {\n    const riferimentoTabella = firebase.database().ref(\"/corsi\");\n    riferimentoTabella.on(\"value\", (tabellaDb) => {\n      const tabFirebase = tabellaDb.val();\n      const chiavi = Object.keys(tabFirebase); // creo una var \"chiavi\" e la riempio grazie all'Object.key con le chiavi, i nodi, principali della tabella del db definendola come se fosse un array ogni chiave\n\n      if (tabFirebase) {\n        // è un if che controlla se ci sono dati nella tabella\n        setTabella(tabFirebase); // assegno all'oggetto \"tabella\" tutti i valori della tabella del db\n        setNodoPrincipale(chiavi); // assegno all'array \"nodo\" solo i valori dei nodi principali sotto forma di array\n      \n      }\n    });\n  }, []);\n\n  // stato che utilizzeremo per aprire e chiudere il nostro menu laterale. Il menu può solo essere aperto o chiudo, perciò utilizzo un booleano (true/aperto, false/chiuso)\n  const [menuVisibile, setMenuVisibile] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  const [utente, setUtente] = useState({ loggato: false });\n  const [allievo, setAllievo] = useState(false); // queste mi definisce se un utente è un ex allievo oppure no\n\n  // grazie allo useEffetc rendiamo vero il nostro loading, lo useEffetc è composto da due elementi separati da virgola, il primo è una funzione il secondo è un array vuoto che indica che dovrà far scatenare la funzione quando l'app sarà pronta (il didMount) e allora gli diremo alla funzione di impostare il loading a false\n  useEffect(() => {\n    function utenteLoggatoCallBack(utenteObj) {\n      // una CallBack è una chiamata ad una funzione, che dovrà avvenire soltanto ad un certo momento e non seguirà il normale flusso degli eventi, in questo caso si avvierà soltanto dopo che firebase ci avrà restituito il \"loggato:true\" al nostro parametro \"utenteObj\" e ci permetterà di invocare i cambi di stato anche al di fuori del nostro componente!\n      setUtente(utenteObj);\n      setLoading(false); // questa è quella che determina la fine del loading e la spostiamo qui dentro perchè io voglio assicurarmi che il loading scompaia solo dopo che Firebase mi avrà restituito i dati dell'utente, altrimenti potrebbe scomparire il login, comparire l'app, ma ancora non ho i dati dell'utente\n    }\n    onUtenteLoggato(utenteLoggatoCallBack); // funzione che intercetta l'avvenuto cambio di stato della login\n  }, []);\n\n  useEffect(() => {\n    // questo useEffect eseguirà il codice al suo interno, tutte le volte che lo stato di utente muterà, perchè abbiamo messo \"utente\" nelle quadre finali\n    if (utente.uid) {\n      // se esiste lo user ID, per cui l'utente è loggato\n      const utenteReferenza = firebase.database().ref(\"/utenti/\" + utente.uid);\n      utenteReferenza.once(\"value\", (utenteDb) => {\n        // once è tipo \"on\" con la differenza che viene eseguita una volta sola\n        const cloneUtenteDb = utenteDb.val(); // come prima cosa andiamo a leggere e prenderci tutti i valori, i nodi principali del DB per verificare se nel db c'è già un nodo con lo stesso uid\n        //console.log(cloneUtenteDb);\n        // console.log(cloneUtenteDb.allievo);\n\n        if (cloneUtenteDb) {\n          // così verifico se l'utente già esiste\n\n          setAllievo(cloneUtenteDb.allievo);\n          setAccesso(false); // imposto allievo con il valore del nodo allievo preso dal db\n          return null; // ok allora non fare nulla\n        } else {\n          setAccesso(true);\n          // se invece non esiste\n          utenteReferenza.set({\n            email: utente.email,\n            nome: utente.nome,\n            foto: utente.foto,\n            allievo: false, // di default lo setto su false\n          });\n        }\n      });\n    }\n  }, [utente]);\n\n  const apriChiudiMenu = () => {\n    // con il punto esclamativo prima di una variabile andiamo a selezionare il valore opposto di un booleano\n    // (se il valore di menuVisibile è true, noi lo mettiamo a false)\n    // questo ci permette di non dover verificare prima di invocare questa funzione se dobbiamo aprire o chiudere il menu: lui lo capirà da solo!\n    setMenuVisibile(!menuVisibile);\n  };\n  const chiudiPrimoAcc = () => {\n    setAccesso(false);\n  };\n  if (loading) {\n    return (\n      <ContenitoreLoading>\n        <CircularProgress />\n      </ContenitoreLoading>\n    );\n  }\n  // questo return verrà letto SOLAMENTE se il loading sarà a false\n  return (\n    <corsiContext.Provider value={\n   {   nodoPrincipale,\n      tabella}\n      }>\n        <Router>\n          <Contenitore className=\"App\">\n            <header className=\"app-header\">\n              {/* questo bottone determina l'apertura o la chiusura del menu*/}\n              <MenuIcon onClick={() => apriChiudiMenu()} />\n              <Menu\n                menuVisibile={menuVisibile}\n                apriChiudiMenu={apriChiudiMenu}\n                logout={logout}\n                loggatiConGoogle={loggatiConGoogle}\n                utente={utente}\n                allievo={allievo}\n              />\n              <Link to={ROTTE.HOME} className=\"linkHome\">\n                <img src={Logo} className=\"logo\" />\n              </Link>\n            </header>\n            {accesso && (\n              <div className=\"contPrimoAccesso\">\n                <h1 className=\"titoloHome\">Grazie per esserti registrato</h1>\n                <p className=\"introAccademia\">\n                  Ti ricordiamo che se sei un nostro ex allievo, ci puoi\n                  contattare alla mail info@anja.it per comunicarci della tua\n                  iscrizione all'app,e dopo un eventuale verifica, ti verrà\n                  attivata l'opzione per visualizzare tutte le{\" \"}\n                  <strong>\n                    offerte di lavoro dedicate ai nostri ex allievi\n                  </strong>\n                  .\n                </p>\n                <Button variant=\"contained\" onClick={() => chiudiPrimoAcc()}>\n                  CHIUDI\n                </Button>\n              </div>\n            )}\n            {!accesso && (\n              <div className=\"app-corpo\">\n                <Switch>\n                  <Route exact path={ROTTE.CONTATTI}>\n                    <Contatti />\n                  </Route>\n                  <Route exact path={ROTTE.MASTER}>\n                    <Master />\n                  </Route>\n                  <Route exact path={ROTTE.CORSI}>\n                    <Corsi />\n                  </Route>\n                  <Route exact path={ROTTE.DETTAGLIO_CORSO + '/:chiave'} pagina={pagina}>\n                     <DettaglioCorso />\n                  </Route>\n\n                  <Route exact path={ROTTE.OFFERTE}>\n                    <Offerte />\n                  </Route>\n                  <Route exact path={ROTTE.CERTIFICAZIONI}>\n                    <Certificazioni />\n                  </Route>\n                  <Route path={ROTTE.HOME}>\n                    <Home />\n                  </Route>\n                </Switch>\n              </div>\n            )}\n            <footer>\n              <Footer/>\n            </footer>\n          </Contenitore>\n        </Router>\n    </corsiContext.Provider>\n  );\n}\nconst Contenitore = styled.div`\n  .app-header {\n    background-color: black;\n    display: flex;\n    align-items: center;\n    justify-content: flex-start;\n    padding: 20px;\n    font-size: 20px;\n    color: white;\n    text-align: right;\n  }\n  .linkHome {\n    display: flex;\n  }\n  .contPrimoAccesso {\n    position: absolute;\n    background: white;\n    height: 100%;\n    padding: 20px;\n  }\n`;\n\nconst ContenitoreLoading = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: auto;\n\n  .MuiCircularProgress-colorPrimary {\n    color: #e0902c;\n  }\n`;\n\nexport default App;\n","/Users/danilo/Documents/projects/AccademiaAnja/src/containers/Home.js",["87"],"import { useContext} from \"react\";\nimport styled from \"styled-components\";\nimport NuoviCorsi from \"../components/NuoviCorsi\";\nimport corsiContext from \"./App\";\n\nconst Home = () => {\n  const corsi = useContext(corsiContext);\n  return (\n    <Contenitore>\n    <h1 className=\"titoloHome\">Accademia Anja</h1>\n    <h2 className=\"sottotitoloHome\">Corsi di formazione: Master Web, Master Grafica e Corsi Web a Roma dal 1999</h2>\n    <p className=\"introAccademia\">\n    Ci occupiamo di formazione professionale nell'ambito dell'informatica <strong>da oltre 20 anni</strong>.\nCosa intendiamo per: Corsi Informatica? Che eroghiamo Corsi professionalizzanti, indirizzati, quindi, ha chi già possiede una buona conoscenza di base sull'utilizzo del Computer.\nNei nostri Master di Grafica e nei Master Web, ci sono 1, 2, o anche 3 Certificazioni valevoli a livello internazionale in omaggio!\nScopri per quali Master e' attiva questa promozione.\n    </p>\n        <NuoviCorsi />\n    </Contenitore>\n  );\n};\n\nconst Contenitore = styled.div`\ndisplay: flex;\n    flex-wrap: wrap;\n    padding: 40px;\n    padding-top:70px;\n    justify-content: center;\n    .titoloHome{\n      color: #5294ce;\n    margin-bottom: 0px;\n    padding-bottom:60px;\n    width:100%!important;\n    text-align:center;\n    }\n    .sottotitoloHome{\n      color: grey;\n    text-align: center;\n    font-size: 21px;\n    margin-top: 3px;\n    }\n    .introAccademia{\n      font-size: 16px;\n    text-align: justify;\n    color: #757575;\n    }\n`\n\nexport default Home;\n","/Users/danilo/Documents/projects/AccademiaAnja/src/components/NuoviCorsi.js",["88","89","90"],"import { useState, useContext} from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { ROTTE } from \"../costanti\";\nimport { corsiContext } from \"../containers/App\";\nimport styled from \"styled-components\";\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Button from '@material-ui/core/Button';\nimport Truncate from 'react-truncate';\n\n// import firebase from \"firebase\";\n// import firebaseConfig from \"../firebase-config\";\n// firebase.initializeApp(firebaseConfig);\n\n\nconst NuoviCorsi = () => {\n  const corsi = useContext(corsiContext);\n\n  // costanti per gli Hook di Routing\n  const listaRottePrecedenti = useHistory();\n  const rottaCorrente = useLocation();\n\n  const cambiaRotta = (nuovaRotta) => {\n    listaRottePrecedenti.push(nuovaRotta);\n  };\n\n  return (\n \n      <Contenitore>\n        <h2>Ecco le ultime novità</h2>\n        {corsi.nodoPrincipale.map((nodo, key) => {\n          if (corsi.tabella[nodo].news === \"y\") {\n            return (\n             \n              <Card className=\"card\" id={key}>\n                <CardHeader\n                  title={corsi.tabella[nodo].nome}\n                  subheader={\"Durata: \" + corsi.tabella[nodo].durata}\n                />\n                <CardMedia className=\"card-media\" image={corsi.tabella[nodo].foto} />\n                <CardContent className=\"programma\">\n\n                <Truncate lines={3} ellipsis={<span>...</span>}>\n                <div\n                    dangerouslySetInnerHTML={{\n                      __html: corsi.tabella[nodo].programma,\n                    }}\n                  ></div>\n            </Truncate>\n           \n                </CardContent>\n                <div>\n                  <Button\n                    onClick={() =>cambiaRotta(ROTTE.DETTAGLIO_CORSO + '/' + nodo)}\n                  >\n                    Visualizza corso\n                  </Button>\n                </div>\n              </Card>\n       \n            );\n          }\n        })}\n      </Contenitore>\n   \n  );\n};\n\nconst Contenitore = styled.div`\n  padding: 10px;\n  .card {\n    width: 350px;\n    margin-bottom: 30px;\n  }\n  .card-media {\n    height: 0;\n    padding-top: 56.25%;\n  }\n  .programma {\n    text-align: left;\n    font-size: 14px;\n    color: grey;\n  }\n`;\nexport default NuoviCorsi;\n","/Users/danilo/Documents/projects/AccademiaAnja/src/containers/Master.js",["91","92","93","94","95","96"],"import { useContext, useState, useEffect } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { ROTTE } from \"../costanti\";\nimport { corsiContext } from \"../containers/App\";\nimport styled from \"styled-components\";\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Button from '@material-ui/core/Button';\nimport Truncate from 'react-truncate';\n\n// import firebase from \"firebase\";\n// import firebaseConfig from \"../firebase-config\";\n// firebase.initializeApp(firebaseConfig);\n\nconst Master = () => {\n  const corsi = useContext(corsiContext);\n\n  // costanti per gli Hook di Routing\n  const listaRottePrecedenti = useHistory();\n  const rottaCorrente = useLocation();\n\n  const cambiaRotta = (nuovaRotta) => {\n    listaRottePrecedenti.push(nuovaRotta);\n  };\n\n  const [pippo, setPippo] = useState(false);\n  const [pluto, setPluto] = useState(11);\n  const [testobtn, setTestobtn] = useState('mostra');\n\n  let prova = {\n    testo:'mimmo'\n  };\n  \n  const cambiaPippo=()=>{\n    if(pippo){\n      setPippo(false);\n      setTestobtn('mostra');\n      prova.testo='mimmo2';\n    }else{\n      setPippo(true);\n      setTestobtn('nascondi');\n      prova['testo']='danilo';\n    }\n  }\n\n \n\n  // useEffect(() => {\n  //   setPippo(false);\n  //   return () => {\n  //     setPippo(true);\n  //     console.log(pippo);\n  //   }\n  // }, [setProva])\n\n\n  return (\n    <Contenitore>\n      <h1>I NOSTRI MASTER:</h1>\n      {\n        //nodo.slice(0,3).map((nodo) => {\n          corsi.nodoPrincipale.map((nodo, key) => {\n          if (corsi.tabella[nodo].master === true) {\n            return (\n              <Card className=\"card\" id={key}>\n                <CardHeader\n                  title={corsi.tabella[nodo].nome}\n                  subheader={\"Durata: \" + corsi.tabella[nodo].durata}\n                />\n                <CardMedia className=\"card-media\" image={corsi.tabella[nodo].foto} />\n                <CardContent className=\"programma\">\n                <Truncate width='1000'>\n                <div\n                    dangerouslySetInnerHTML={{\n                      __html: corsi.tabella[nodo].programma,\n                    }}\n                  />\n            </Truncate>\n            <div>\n            <Button\n                    onClick={() =>cambiaRotta(ROTTE.DETTAGLIO_CORSO + '/' + nodo)}\n                  >\n                    Visualizza corso\n                  </Button>\n                </div>\n                \n                </CardContent>\n              </Card>\n            );\n          } else {\n            return null;\n          }\n        })\n      }\n    </Contenitore>\n  );\n};\n\nconst Contenitore = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  padding: 10px;\n  justify-content: center;\n  margin-top:50px;\n  h1{\n    display: block;\n    width: 100%;\n    text-align: center;\n  }\n  h2 {\n    width: 100%;\n    text-align: center;\n    color: #4d7ae0;\n  }\n  .card {\n    width: 350px;\n    margin: 20px;\n    margin-bottom: 30px;\n  }\n  .card-media {\n    height: 0;\n    padding-top: 56.25%;\n  }\n  .programma {\n    text-align: left;\n    font-size: 14px;\n    color: grey;\n  }\n`;\nexport default Master;\n","/Users/danilo/Documents/projects/AccademiaAnja/src/containers/Corsi.js",["97","98"],"/Users/danilo/Documents/projects/AccademiaAnja/src/containers/Contatti.js",["99"],"import styled from \"styled-components\";\nimport mappa from \"../img/mappa-anja.jpg\";\n\nconst Contatti = () => {\n  return (\n    <Contenitore>\n      <h2>Accademia Anja</h2>\n      <div>\n        Via Alberto Einstein 13\n        <br />\n        scala E, interno 1<br />\n        00146, Roma\n        <br /><br />\n        Adiacenze »<br />\n        V.le Marconi/Staz. Trastevere\n        <br />\n        Email : info@anja.it\n        <br />\n        Pec: accademia-anja@pec.it\n        <br />\n        TEL. <strong>06.393.700.73</strong>\n        <br />\n        MOBILE & WHATSAPP. <strong>391.40.98.575</strong>\n        <br />\n        <img src={mappa} className=\"mappa\" />\n        <p>\n        La nostra segreteria è aperta dal lunedì al venerdì con i seguenti\n        orari:\n        <br />\n        <strong>mattina:</strong> dalle 10.00 alle 13.00.\n        <br />\n        <strong>pomeriggio:</strong> dalle 16.00 alle 19.00.\n        <br />\n        <span className=\"sottoTitolo\">(Non è necessario prendere un appuntamento, ma è sempre gradito.)</span>\n        <br />\n        </p>\n     \n      </div>\n    </Contenitore>\n  );\n};\n\nconst Contenitore = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  padding: 40px;\n  padding-top:100px;\n  justify-content: center;\n  .mappa {\n    width: 100%;\n    border: 2px solid black;\n    margin-top: 30px;\n  }\n  h2{\n    margin-top:-20px;\n  }\n  p{\n    font-size:0.8em;\n  }\n  .sottoTitolo{\n    color:grey;\n    text-align:center;\n    width:100%;\n    display:inline-block;\n    margin-top:10px;\n  }\n`;\n\nexport default Contatti;\n","/Users/danilo/Documents/projects/AccademiaAnja/src/containers/PrimoAccesso.js",[],"/Users/danilo/Documents/projects/AccademiaAnja/src/components/Footer.js",["100"],"import { useState } from \"react\";\nimport {\n    useHistory,\n    useLocation,\n  } from \"react-router-dom\";\n  import {ROTTE} from '../costanti';\n\nimport BottomNavigation from \"@material-ui/core/BottomNavigation\";\nimport BottomNavigationAction from \"@material-ui/core/BottomNavigationAction\";\nimport SchoolIcon from '@material-ui/icons/School';\nimport HomeIcon from \"@material-ui/icons/Home\";\nimport LocationOnIcon from \"@material-ui/icons/LocationOn\";\n\nconst Footer = (props) => {\n// costanti per gli Hook di Routing\nconst listaRottePrecedenti = useHistory();\n const cambiaRotta = (nuovaRotta) => {\n   listaRottePrecedenti.push(nuovaRotta);\n };\n\n  const [value, setValue] = useState(\"home\");\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  return (\n      \n    <BottomNavigation value={value} onChange={handleChange}>\n      <BottomNavigationAction value=\"home\" icon={<HomeIcon />} label=\"home\" onClick={()=> cambiaRotta(ROTTE.HOME)}/>\n      <BottomNavigationAction value=\"master\" icon={<SchoolIcon />} label=\"master\" onClick={()=> cambiaRotta(ROTTE.MASTER)}/>\n      <BottomNavigationAction value=\"contatti\" icon={<LocationOnIcon />} label=\"contatti\" onClick={()=>cambiaRotta(ROTTE.CONTATTI)}/>\n    </BottomNavigation>\n  );\n};\n\nexport default Footer;\n","/Users/danilo/Documents/projects/AccademiaAnja/src/containers/Certificazioni.js",[],"/Users/danilo/Documents/projects/AccademiaAnja/src/containers/Offerte.js",[],"/Users/danilo/Documents/projects/AccademiaAnja/src/containers/DettaglioCorso.js",["101"],{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","severity":1,"message":"107","line":1,"column":10,"nodeType":"108","messageId":"109","endLine":1,"endColumn":18},{"ruleId":"106","severity":1,"message":"110","line":13,"column":8,"nodeType":"108","messageId":"109","endLine":13,"endColumn":14},{"ruleId":"106","severity":1,"message":"111","line":20,"column":8,"nodeType":"108","messageId":"109","endLine":20,"endColumn":21},{"ruleId":"112","severity":1,"message":"113","line":47,"column":19,"nodeType":"114","endLine":47,"endColumn":73},{"ruleId":"106","severity":1,"message":"115","line":27,"column":3,"nodeType":"108","messageId":"109","endLine":27,"endColumn":13},{"ruleId":"106","severity":1,"message":"116","line":73,"column":18,"nodeType":"108","messageId":"109","endLine":73,"endColumn":27},{"ruleId":"112","severity":1,"message":"113","line":174,"column":17,"nodeType":"114","endLine":174,"endColumn":52},{"ruleId":"106","severity":1,"message":"117","line":7,"column":9,"nodeType":"108","messageId":"109","endLine":7,"endColumn":14},{"ruleId":"106","severity":1,"message":"107","line":1,"column":10,"nodeType":"108","messageId":"109","endLine":1,"endColumn":18},{"ruleId":"106","severity":1,"message":"111","line":23,"column":9,"nodeType":"108","messageId":"109","endLine":23,"endColumn":22},{"ruleId":"118","severity":1,"message":"119","line":33,"column":47,"nodeType":"120","messageId":"121","endLine":33,"endColumn":49},{"ruleId":"106","severity":1,"message":"122","line":1,"column":32,"nodeType":"108","messageId":"109","endLine":1,"endColumn":41},{"ruleId":"106","severity":1,"message":"111","line":22,"column":9,"nodeType":"108","messageId":"109","endLine":22,"endColumn":22},{"ruleId":"106","severity":1,"message":"123","line":29,"column":10,"nodeType":"108","messageId":"109","endLine":29,"endColumn":15},{"ruleId":"106","severity":1,"message":"124","line":29,"column":17,"nodeType":"108","messageId":"109","endLine":29,"endColumn":25},{"ruleId":"106","severity":1,"message":"125","line":30,"column":10,"nodeType":"108","messageId":"109","endLine":30,"endColumn":18},{"ruleId":"106","severity":1,"message":"126","line":36,"column":9,"nodeType":"108","messageId":"109","endLine":36,"endColumn":20},{"ruleId":"106","severity":1,"message":"127","line":5,"column":18,"nodeType":"108","messageId":"109","endLine":5,"endColumn":27},{"ruleId":"106","severity":1,"message":"111","line":24,"column":9,"nodeType":"108","messageId":"109","endLine":24,"endColumn":22},{"ruleId":"112","severity":1,"message":"113","line":25,"column":9,"nodeType":"114","endLine":25,"endColumn":46},{"ruleId":"106","severity":1,"message":"128","line":4,"column":5,"nodeType":"108","messageId":"109","endLine":4,"endColumn":16},{"ruleId":"106","severity":1,"message":"129","line":9,"column":8,"nodeType":"108","messageId":"109","endLine":9,"endColumn":18},"no-native-reassign",["130"],"no-negated-in-lhs",["131"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Switch' is defined but never used.","'rottaCorrente' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useHistory' is defined but never used.","'setPagina' is assigned a value but never used.","'corsi' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'useEffect' is defined but never used.","'pluto' is assigned a value but never used.","'setPluto' is assigned a value but never used.","'testobtn' is assigned a value but never used.","'cambiaPippo' is assigned a value but never used.","'keyframes' is defined but never used.","'useLocation' is defined but never used.","'CardHeader' is defined but never used.","no-global-assign","no-unsafe-negation"]