[{"/Users/danilo/Documents/projects/AccademiaAnja/src/index.js":"1","/Users/danilo/Documents/projects/AccademiaAnja/src/reportWebVitals.js":"2","/Users/danilo/Documents/projects/AccademiaAnja/src/firebase-config.js":"3","/Users/danilo/Documents/projects/AccademiaAnja/src/costanti.js":"4","/Users/danilo/Documents/projects/AccademiaAnja/src/components/Menu.js":"5","/Users/danilo/Documents/projects/AccademiaAnja/src/global-styles.js":"6","/Users/danilo/Documents/projects/AccademiaAnja/src/containers/App.js":"7","/Users/danilo/Documents/projects/AccademiaAnja/src/containers/Home.js":"8","/Users/danilo/Documents/projects/AccademiaAnja/src/components/NuoviCorsi.js":"9","/Users/danilo/Documents/projects/AccademiaAnja/src/containers/Master.js":"10","/Users/danilo/Documents/projects/AccademiaAnja/src/containers/Corsi.js":"11","/Users/danilo/Documents/projects/AccademiaAnja/src/containers/Contatti.js":"12","/Users/danilo/Documents/projects/AccademiaAnja/src/containers/PrimoAccesso.js":"13","/Users/danilo/Documents/projects/AccademiaAnja/src/components/Footer.js":"14","/Users/danilo/Documents/projects/AccademiaAnja/src/containers/Certificazioni.js":"15","/Users/danilo/Documents/projects/AccademiaAnja/src/containers/Offerte.js":"16","/Users/danilo/Documents/projects/AccademiaAnja/src/containers/DettaglioCorso.js":"17","/Users/danilo/Documents/projects/AccademiaAnja/src/containers/Preferiti.js":"18","/Users/danilo/Documents/projects/AccademiaAnja/src/containers/Login.js":"19","/Users/danilo/Documents/projects/AccademiaAnja/src/utils/filtri.js":"20","/Users/danilo/Documents/projects/AccademiaAnja/src/components/MiniaturaCorso.js":"21","/Users/danilo/Documents/projects/AccademiaAnja/src/containers/CercaCorsi.js":"22"},{"size":634,"mtime":1611660916584,"results":"23","hashOfConfig":"24"},{"size":362,"mtime":1608628662543,"results":"25","hashOfConfig":"24"},{"size":435,"mtime":1608634388296,"results":"26","hashOfConfig":"24"},{"size":341,"mtime":1612520525846,"results":"27","hashOfConfig":"24"},{"size":4648,"mtime":1612520746317,"results":"28","hashOfConfig":"24"},{"size":4062,"mtime":1611679589872,"results":"29","hashOfConfig":"24"},{"size":13229,"mtime":1612520539333,"results":"30","hashOfConfig":"24"},{"size":3970,"mtime":1611740992515,"results":"31","hashOfConfig":"24"},{"size":4425,"mtime":1611155135677,"results":"32","hashOfConfig":"24"},{"size":5440,"mtime":1611155300451,"results":"33","hashOfConfig":"24"},{"size":4848,"mtime":1612979048384,"results":"34","hashOfConfig":"24"},{"size":1539,"mtime":1609869535738,"results":"35","hashOfConfig":"24"},{"size":969,"mtime":1609433047539,"results":"36","hashOfConfig":"24"},{"size":1276,"mtime":1609682712894,"results":"37","hashOfConfig":"24"},{"size":628,"mtime":1609869627056,"results":"38","hashOfConfig":"24"},{"size":690,"mtime":1609869612771,"results":"39","hashOfConfig":"24"},{"size":6167,"mtime":1611154774012,"results":"40","hashOfConfig":"24"},{"size":4170,"mtime":1611221835995,"results":"41","hashOfConfig":"24"},{"size":2639,"mtime":1611223214252,"results":"42","hashOfConfig":"24"},{"size":2225,"mtime":1612371337632,"results":"43","hashOfConfig":"24"},{"size":3784,"mtime":1612370227195,"results":"44","hashOfConfig":"24"},{"size":7580,"mtime":1612520442360,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"fi432f",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"48"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"48"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"48"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"48"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"48"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"48"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"48"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"48"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"48"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"48"},"/Users/danilo/Documents/projects/AccademiaAnja/src/index.js",[],["103","104"],"/Users/danilo/Documents/projects/AccademiaAnja/src/reportWebVitals.js",[],"/Users/danilo/Documents/projects/AccademiaAnja/src/firebase-config.js",[],"/Users/danilo/Documents/projects/AccademiaAnja/src/costanti.js",[],"/Users/danilo/Documents/projects/AccademiaAnja/src/components/Menu.js",["105","106","107","108"],"import { useState, useContext } from \"react\";\n\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { ROTTE } from \"../costanti\";\n\nimport SwipeableDrawer from \"@material-ui/core/SwipeableDrawer\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Switch from \"@material-ui/core/Switch\";\nimport Button from \"@material-ui/core/Button\";\n\nimport { UtenteContext } from \"../containers/App\";\n\nconst Menu = (props) => {\n  // costanti per gli Hook di Routing\n  const listaRottePrecedenti = useHistory();\n  const rottaCorrente = useLocation();\n\n  const contestoUtente = useContext(UtenteContext);\n\n  const cambiaRotta = (nuovaRotta) => {\n    listaRottePrecedenti.push(nuovaRotta);\n    props.apriChiudiMenu();\n  };\n\n  return (\n    <>\n      {/* \n        qui inizia il menu, con l'elemento SwipeableDrawer che contiene tutti i bottoni con i nomi delle sezione della mia APP \n        anchor indica la posizione da cui il menu si aprirà\n        open indica se il menu è aperto o chiuso\n        onClose e onOpen sono eventi legati allo swipe dell'utente (in generale per noi è importante invocare una sola funzione: apriChiudiMenu)\n      */}\n      <SwipeableDrawer\n        anchor=\"left\"\n        open={props.menuVisibile}\n        onClose={() => props.apriChiudiMenu()}\n        onOpen={() => props.apriChiudiMenu()}\n      >\n        {/* List svolge il ruolo di <ul> e ListItem quello di <li>: in questo caso potrei utilizzare una costante ed eseguire un .map per ciclarmi tutte le pagine della mia app che voglio elencare */}\n        <List className=\"contenitoreMenu\">\n          <ListItem button key=\"ciao\">\n            {props.utente.loggato && (\n              <div>\n                Ciao <br />\n                {props.utente.nome}{\" \"}\n                <img src={props.utente.foto} className=\"fotoUtente\" />\n              </div>\n            )}\n          </ListItem>\n\n          <ListItem button key=\"Home\" onClick={() => cambiaRotta(ROTTE.HOME)}>\n            <ListItemText primary=\"Home\" />\n          </ListItem>\n          <ListItem\n            button\n            key=\"I Corsi\"\n            onClick={() => cambiaRotta(ROTTE.MASTER)}\n          >\n            <ListItemText primary=\"I Master\" />\n          </ListItem>\n          <ListItem\n            button\n            key=\"I Corsi\"\n            onClick={() => cambiaRotta(ROTTE.CORSI)}\n          >\n            <ListItemText primary=\"Tutti i Corsi\" />\n          </ListItem>\n          <ListItem\n            button\n            key=\"Cerca un corso\"\n            onClick={() => cambiaRotta(ROTTE.CERCA_CORSI)}\n          >\n            <ListItemText primary=\"Cerca un corso\" />\n          </ListItem>\n          <ListItem\n            button\n            key=\"Contatti\"\n            onClick={() => cambiaRotta(ROTTE.CONTATTI)}\n          >\n            <ListItemText primary=\"Contatti\" />\n          </ListItem>\n          <ListItem\n            button\n            key=\"Certificazioni\"\n            onClick={() => cambiaRotta(ROTTE.CERTIFICAZIONI)}\n          >\n            <ListItemText primary=\"Certificazioni\" />\n          </ListItem>\n\n          <>\n            <ListItem\n              button\n              key=\"Preferiti\"\n              onClick={() => cambiaRotta(ROTTE.PREFERITI)}\n            >\n              <ListItemText primary=\"Preferiti\" />\n            </ListItem>\n            {contestoUtente.allievo && contestoUtente.utente.loggato && (\n              <ListItem\n                button\n                key=\"Offerte di lavoro\"\n                onClick={() => cambiaRotta(ROTTE.OFFERTE)}\n                className=\"btnOfferte\"\n              >\n                <ListItemText primary=\"Offerte di lavoro\" />\n              </ListItem>\n            )}\n          </>\n\n\n\n          {!contestoUtente.utente?.loggato && (\n            <div className=\"avvisoAllievo\">\n              Se sei un nostro ex allievo, accedi con Google, e poi contattaci\n              via email per comunicarci della tua iscrizione all'app, dopo una\n              verifica, ti verrà attivata l'opzione per visualizzare tutte le{\" \"}\n              <strong>offerte di lavoro dedicate ai nostri ex allievi.</strong>\n            </div>\n          )}\n  \n        </List>\n        {!contestoUtente.utente?.loggato && (\n          <Button onClick={() => props.loggatiConGoogle()}>\n            Accedi con Google\n          </Button>\n        )}\n        {contestoUtente.utente?.loggato && (\n          <div>\n            <Button onClick={() => props.logout()}>ESCI</Button>\n          </div>\n        )}\n      </SwipeableDrawer>\n    </>\n  );\n};\n\nexport default Menu;\n","/Users/danilo/Documents/projects/AccademiaAnja/src/global-styles.js",[],"/Users/danilo/Documents/projects/AccademiaAnja/src/containers/App.js",["109","110","111","112","113"],"import { useState, useEffect, createContext } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Home from \"./Home\";\nimport Corsi from \"./Corsi\";\nimport CercaCorsi from \"./CercaCorsi\";\nimport DettaglioCorso from \"./DettaglioCorso\";\nimport Master from \"./Master\";\nimport Contatti from \"./Contatti\";\nimport Certificazioni from \"./Certificazioni\";\nimport Offerte from \"./Offerte\";\nimport Preferiti from \"./Preferiti\";\nimport Login from \"./Login\";\nimport Footer from \"../components/Footer\";\nimport Logo from \"../img/logo.jpg\";\n\n// importiamo gli elementi di material ui che cxi occorrono : il menu vero e proprio e gli elementi list, list item e list text per stilizzare i bottoni che avremo nel menu\nimport Menu from \"../components/Menu\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\nimport styled from \"styled-components\";\nimport firebase from \"firebase\";\nimport firebaseConfig from \"../firebase-config\";\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useHistory,\n} from \"react-router-dom\";\n\nimport { ROTTE } from \"../costanti\";\n\nfirebase.initializeApp(firebaseConfig);\n\nfunction onUtenteLoggato(utenteLoggatoCallBack) {\n  // eseguirà questo codice del return, interno al metodo, quando l'utente si sarà loggato o sloggato\n  return firebase.auth().onAuthStateChanged((utenteParametro) => {\n    if (utenteParametro) {\n      // così vuol dire che è loggato\n      console.log(\"utenteParametro: \", utenteParametro); // cosi possiamo vedere quali dati ci passa google\n      utenteLoggatoCallBack({\n        loggato: true,\n        nome: utenteParametro.displayName,\n        email: utenteParametro.email,\n        foto: utenteParametro.photoURL,\n        uid: utenteParametro.uid,\n      });\n    } else {\n      utenteLoggatoCallBack({\n        loggato: false,\n      });\n    }\n  });\n}\n\nconst auth = firebase.auth();\nconst provider = new firebase.auth.GoogleAuthProvider();\n\nconst loggatiConGoogle = () => {\n  auth.signInWithPopup(provider);\n};\n\nconst logout = () => {\n  firebase.auth().signOut();\n};\n\nexport const corsiContext = createContext();\nexport const UtenteContext = createContext();\n\nfunction App() {\n  const [accesso, setAccesso] = useState(false);\n  const [nodoPrincipale, setNodoPrincipale] = useState([]); // qui definisco l'array che conterrà tutti i nodi principali trasformati in array\n  const [tabella, setTabella] = useState({}); // qui creo un oggetto che si riempirà con tutti i valori della tabella del db\n\n  const [pagina, setPagina] = useState(\"\");\n\n  const [preferiti, setPreferiti] = useState({});\n  const aggiungiPreferito = (id) => {\n    // aggiungo al mio db, nel nodo utente loggato il mio nuovo preferito, generando una nuova chiave univoca id\n    const preferitoRef = firebase\n      .database()\n      .ref(`/utenti/${utente.uid}/preferiti`)\n      .push(id);\n    const chiavePreferito = preferitoRef.key; // estraggo la chiave\n\n    // creo il nuovo oggetto di preferito a partire da quelli già presenti clonando il miostato preferiti\n    const nuoviPreferiti = { ...preferiti };\n    nuoviPreferiti[chiavePreferito] = id;\n\n    // e qui aggiungo il nuovo preferito\n    setPreferiti(nuoviPreferiti);\n  };\n\n  const rimuoviPreferito = (id) => {\n    const chiaveDaRimuovere = Object.keys(preferiti).find((chiave) => preferiti[chiave] === id); // trasformo lo stato preferiti in un array di chiavi (con Object.keys), e la scorro, lo ciclo, tutto e poi vado a cercare (con il find che si usa con le array) quel elemento che associato ad una chiave particolare  (chiave) sarà uguale al valore di ID che gli stiamo passando\n\n    // rimuoviamo il preferito da firebase utilizzando il metodo remove\n    const preferitoRef = firebase\n      .database()\n      .ref(`/utenti/${utente.uid}/preferiti/${chiaveDaRimuovere}`)\n      .remove();\n\n    // creo il nuovo oggetto di preferito a partire da quelli già presenti clonando il miostato preferiti\n    const nuoviPreferiti = { ...preferiti };\n\n    // rimuovo il preferito dal mio oggetta appena clonato\n    delete nuoviPreferiti[chiaveDaRimuovere];\n\n    setPreferiti(nuoviPreferiti);\n  };\n\n  const isPreferito = (id) => {\n    // questo metodo serve a verificare se una ricetta fa o meno parte dei preferiti\n    //ciclo l'oggeto preferiti e mi trovo se è presente  l'id specificato nell'input (id), se c'è avrò il suo indice nell'array, altrimenti il valore restituito è -1, perchè il findIndex funziona cosi, se trova bene altrimenti mette -1\n    const chiavePreferito = Object.keys(preferiti).findIndex(\n      (chiave) => preferiti[chiave] === id\n    );\n    if (chiavePreferito >= 0) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  const togglePreferito = (id) => {\n    if (isPreferito(id)) {\n      return rimuoviPreferito(id);\n    } else {\n      return aggiungiPreferito(id);\n    }\n  };\n\n\n\n  useEffect(() => {\n    const riferimentoTabella = firebase.database().ref(\"/corsi\");\n    riferimentoTabella.on(\"value\", (tabellaDb) => {\n      const tabFirebase = tabellaDb.val();\n      const chiavi = Object.keys(tabFirebase); // creo una var \"chiavi\" e la riempio grazie all'Object.key con le chiavi, i nodi, principali della tabella del db definendola come se fosse un array ogni chiave\n\n      if (tabFirebase) {\n        // è un if che controlla se ci sono dati nella tabella\n        setTabella(tabFirebase); // assegno all'oggetto \"tabella\" tutti i valori della tabella del db\n        setNodoPrincipale(chiavi); // assegno all'array \"nodo\" solo i valori dei nodi principali sotto forma di array\n      }\n    });\n  }, []);\n\n  // stato che utilizzeremo per aprire e chiudere il nostro menu laterale. Il menu può solo essere aperto o chiudo, perciò utilizzo un booleano (true/aperto, false/chiuso)\n  const [menuVisibile, setMenuVisibile] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  const [utente, setUtente] = useState({ loggato: false });\n  const [allievo, setAllievo] = useState(false); // queste mi definisce se un utente è un ex allievo oppure no\n\n  // grazie allo useEffetc rendiamo vero il nostro loading, lo useEffetc è composto da due elementi separati da virgola, il primo è una funzione il secondo è un array vuoto che indica che dovrà far scatenare la funzione quando l'app sarà pronta (il didMount) e allora gli diremo alla funzione di impostare il loading a false\n  useEffect(() => {\n    function utenteLoggatoCallBack(utenteObj) {\n      // una CallBack è una chiamata ad una funzione, che dovrà avvenire soltanto ad un certo momento e non seguirà il normale flusso degli eventi, in questo caso si avvierà soltanto dopo che firebase ci avrà restituito il \"loggato:true\" al nostro parametro \"utenteObj\" e ci permetterà di invocare i cambi di stato anche al di fuori del nostro componente!\n      setUtente(utenteObj);\n      setLoading(false); // questa è quella che determina la fine del loading e la spostiamo qui dentro perchè io voglio assicurarmi che il loading scompaia solo dopo che Firebase mi avrà restituito i dati dell'utente, altrimenti potrebbe scomparire il login, comparire l'app, ma ancora non ho i dati dell'utente\n    }\n    onUtenteLoggato(utenteLoggatoCallBack); // funzione che intercetta l'avvenuto cambio di stato della login\n  }, []);\n\n  useEffect(() => {\n    // questo useEffect eseguirà il codice al suo interno, tutte le volte che lo stato di utente muterà, perchè abbiamo messo \"utente\" nelle quadre finali\n    if (utente.uid) {\n      // se esiste lo user ID, per cui l'utente è loggato\n      const utenteReferenza = firebase.database().ref(\"/utenti/\" + utente.uid);\n      utenteReferenza.once(\"value\", (utenteDb) => {\n        // once è tipo \"on\" con la differenza che viene eseguita una volta sola\n        const cloneUtenteDb = utenteDb.val(); // come prima cosa andiamo a leggere e prenderci tutti i valori, i nodi principali del DB per verificare se nel db c'è già un nodo con lo stesso uid\n        //console.log(cloneUtenteDb);\n        // console.log(cloneUtenteDb.allievo);\n\n        if (cloneUtenteDb) {\n          // così verifico se l'utente già esiste\n\n          // se esiste ed ha dei preferiti, li prendo e li assegno alla super var preferiti\n          if(cloneUtenteDb.preferiti){\n            setPreferiti(cloneUtenteDb.preferiti);\n          }\n \n\n          setAllievo(cloneUtenteDb.allievo);\n          setAccesso(false); // imposto allievo con il valore del nodo allievo preso dal db\n          return null; // ok allora non fare nulla\n        } else {\n          setAccesso(true);\n          // se invece non esiste\n          utenteReferenza.set({\n            email: utente.email,\n            nome: utente.nome,\n            foto: utente.foto,\n            allievo: false, // di default lo setto su false\n          });\n        }\n      });\n    }\n  }, [utente]);\n\n  const apriChiudiMenu = () => {\n    // con il punto esclamativo prima di una variabile andiamo a selezionare il valore opposto di un booleano\n    // (se il valore di menuVisibile è true, noi lo mettiamo a false)\n    // questo ci permette di non dover verificare prima di invocare questa funzione se dobbiamo aprire o chiudere il menu: lui lo capirà da solo!\n    setMenuVisibile(!menuVisibile);\n  };\n  const chiudiPrimoAcc = () => {\n    setAccesso(false);\n  };\n  if (loading) {\n    return (\n      <ContenitoreLoading>\n        <CircularProgress />\n      </ContenitoreLoading>\n    );\n  }\n  // questo return verrà letto SOLAMENTE se il loading sarà a false\n  return (\n    <corsiContext.Provider value={{ nodoPrincipale, tabella }}>\n          <UtenteContext.Provider\n        value={{\n          utente,\n          allievo,\n          togglePreferito,\n          isPreferito,\n        }}\n      >\n      <Router>\n        <Contenitore className=\"App\">\n          <header className=\"app-header\">\n            {/* questo bottone determina l'apertura o la chiusura del menu*/}\n            <MenuIcon onClick={() => apriChiudiMenu()} />\n            <Menu\n              menuVisibile={menuVisibile}\n              apriChiudiMenu={apriChiudiMenu}\n              logout={logout}\n              loggatiConGoogle={loggatiConGoogle}\n              utente={utente}\n            />\n            <Link to={ROTTE.HOME} className=\"linkHome\">\n              <img src={Logo} className=\"logo\" />\n            </Link>\n          </header>\n          {accesso && (\n            <div className=\"contPrimoAccesso\">\n              <h1 className=\"titoloHome\">Grazie per esserti registrato</h1>\n              <p className=\"introAccademia\">\n                Ti ricordiamo che se sei un nostro ex allievo, ci puoi\n                contattare alla mail info@anja.it per comunicarci della tua\n                iscrizione all'app,e dopo un eventuale verifica, ti verrà\n                attivata l'opzione per visualizzare tutte le{\" \"}\n                <strong>offerte di lavoro dedicate ai nostri ex allievi</strong>\n                .\n              </p>\n              <Button variant=\"contained\" onClick={() => chiudiPrimoAcc()}>\n                CHIUDI\n              </Button>\n            </div>\n          )}\n          {!accesso && (\n            <div className=\"app-corpo\">\n              <Switch>\n                <Route exact path={ROTTE.CONTATTI}>\n                  <Contatti />\n                </Route>\n                <Route exact path={ROTTE.MASTER}>\n                  <Master />\n                </Route>\n                <Route exact path={ROTTE.CORSI}>\n                  <Corsi />\n                </Route>\n                <Route exact path={ROTTE.CERCA_CORSI}>\n                  <CercaCorsi />\n                </Route>\n                <Route\n                  exact\n                  path={ROTTE.DETTAGLIO_CORSO + \"/:chiave\"}\n                  pagina={pagina}\n                >\n                  <DettaglioCorso />\n                </Route>\n                <Route exact path={ROTTE.OFFERTE}>\n                  <Offerte />\n                </Route>\n                <Route exact path={ROTTE.CERTIFICAZIONI}>\n                  <Certificazioni />\n                </Route>\n                <Route exact path={ROTTE.PREFERITI}>\n                  <Preferiti />\n                </Route>\n                <Route exact path={ROTTE.LOGIN}>\n                  <Login loggatiConGoogle={loggatiConGoogle} />\n                </Route>\n                <Route path={ROTTE.HOME}>\n                  <Home />\n                </Route>\n              </Switch>\n            </div>\n          )}\n          {/* <footer>\n            <Footer />\n          </footer> */}\n        </Contenitore>\n      </Router>\n      </UtenteContext.Provider>\n    </corsiContext.Provider>\n  );\n}\nconst Contenitore = styled.div`\n  .app-header {\n    background-color: black;\n    display: flex;\n    align-items: center;\n    justify-content: flex-start;\n    padding: 20px;\n    font-size: 20px;\n    color: white;\n    text-align: right;\n  }\n  .linkHome {\n    display: flex;\n  }\n  .contPrimoAccesso {\n    position: absolute;\n    background: white;\n    padding: 30px;\n    margin-top: 78px;\n  }\n`;\n\nconst ContenitoreLoading = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: auto;\n\n  .MuiCircularProgress-colorPrimary {\n    color: #e0902c;\n  }\n`;\n\nexport default App;\n","/Users/danilo/Documents/projects/AccademiaAnja/src/containers/Home.js",["114","115","116","117"],"import { useContext, useState, useEffect} from \"react\";\nimport styled from \"styled-components\";\nimport NuoviCorsi from \"../components/NuoviCorsi\";\nimport corsiContext from \"./App\";\nimport { colors, breakpoints } from \"../global-styles\";\n\nimport Slider from \"react-slick\";\n\nimport firebase from 'firebase';\nimport firebaseConfig from \"../firebase-config\";\n\n\n\nconst Home = () => {\n  const [nodo, setNodo] = useState([]);\n   \n  useEffect(() => {\n        const riferimentoTabella = firebase.database().ref('/slide');\n        riferimentoTabella.on(\"value\", (idTabella) => {\n            const idTabFirebase = idTabella.val();\n \n            if (idTabFirebase) {\n                setNodo(idTabFirebase);\n            }\n        });\n    }, []);\n \n\n  const corsi = useContext(corsiContext);\n  const baseUrl = \"https://www.accademia-anja.com/img/gallery-grafica/\";\n\n\n  const settings = {\n    dots: false,\n    fade:false,\n    infinite: true,\n    speed: 500,\n    slidesToShow: 1,\n    slidesToScroll: 1\n  };\n  return (\n    <Contenitore>\n    <h1 className=\"titoloHome\">Accademia Anja</h1>\n    <h2 className=\"sottotitoloHome\">Corsi di formazione: Master Web, Master Grafica e Corsi Web a Roma dal 1999</h2>\n    <p className=\"introAccademia\">\n    Ci occupiamo di formazione professionale nell'ambito dell'informatica <strong>da oltre 20 anni</strong>.\nCosa intendiamo per: Corsi Informatica? Che eroghiamo Corsi professionalizzanti, indirizzati, quindi, ha chi già possiede una buona conoscenza di base sull'utilizzo del Computer.\nNei nostri Master di Grafica e nei Master Web, ci sono 1, 2, o anche 3 Certificazioni valevoli a livello internazionale in omaggio!\nScopri per quali Master e' attiva questa promozione.\n    </p>\n        <NuoviCorsi />\n        <div className=\"home-slider-container\">\n            <div className=\"home-slider-title\">\n                <span>Alcuni lavori dei nostri allievi</span>\n            </div>\n            <Slider {...settings} className=\"slider-wrapper\">\n                  {nodo.map((slide, indice) => (\n                      <div>\n                                <img src={slide.foto}/>\n                                </div>\n                              )\n                            )}\n              </Slider>\n  \t </div>\n\n    </Contenitore>\n  );\n};\n\nconst Contenitore = styled.div`\ndisplay: flex;\n    flex-wrap: wrap;\n    padding: 40px;\n    padding-top:70px;\n    justify-content: center;\n    .titoloHome{\n      color: ${colors.titolo};\n    margin-bottom: 0px;\n    padding-bottom:60px;\n    width:100%!important;\n    text-align:center;\n    }\n    .sottotitoloHome{\n      color: grey;\n    text-align: center;\n    font-size: 21px;\n    margin-top: 3px;\n    }\n    .introAccademia{\n      font-size: 16px;\n    text-align: justify;\n    color: #757575;\n    }\n    .home-slider-container {\n    padding: 15px 15px;\n    max-width: 1400px;\n    @media only screen and (max-width: ${breakpoints.screenDeskMid}) {\n      max-width: 1300px;\n    }\n    @media only screen and (max-width: ${breakpoints.screenDeskSmall}) {\n      max-width: 960px;\n    }\n    @media only screen and (max-width: ${breakpoints.screenMobBig}) {\n      max-width: 768px;\n    }\n    @media only screen and (max-width: ${breakpoints.screenMobMedium}) {\n      max-width: 600px;\n    }\n    @media only screen and (max-width: ${breakpoints.screenMobMid}) {\n      max-width: 411px;\n    }\n    .home-slider-title {\n      color: ${colors.titolo};\n      text-transform: uppercase;\n      font-size: 18px;\n      font-weight: bold;\n      letter-spacing: 1px;\n      margin-top: 10px;\n      text-align:center;\n      @media only screen and (min-width: ${breakpoints.screenMobBig}) {\n        text-align: center;\n        font-size: 19px;\n        letter-spacing: 6px;\n        font-weight: 500;\n        margin-top: 10px;\n        margin-bottom: 10px;\n      }\n    }\n    .home-slider-wrapper {\n      margin: 30px;\n      .slider-img{\n        width:80%;\n        height:500px;\n      }\n    }\n  }\n    \n    \n`\n\nexport default Home;\n","/Users/danilo/Documents/projects/AccademiaAnja/src/components/NuoviCorsi.js",["118","119"],"import { useState, useContext } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { ROTTE } from \"../costanti\";\nimport { corsiContext } from \"../containers/App\";\nimport styled from \"styled-components\";\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Button from \"@material-ui/core/Button\";\nimport Truncate from \"react-truncate\";\n\nimport { colors } from \"../global-styles\";\n\nimport CardActions from \"@material-ui/core/CardActions\";\nimport { UtenteContext } from \"../containers/App\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\";\n\nconst NuoviCorsi = () => {\n  const [mostraFrase, setMostraFrase] = useState(false);\n  const [frase, setFrase] = useState(\"\");\n  const gestisciFrase = () => {\n    if (mostraFrase) {\n      setFrase(\"\");\n      setMostraFrase(false);\n    } else {\n      setFrase(\"per usare i preferiti devi essere loggato!\");\n      setMostraFrase(true);\n    }\n  };\n\n  const corsi = useContext(corsiContext);\n\n  // costanti per gli Hook di Routing\n  const listaRottePrecedenti = useHistory();\n  const rottaCorrente = useLocation();\n  const contestoUtente = useContext(UtenteContext);\n\n  const cambiaRotta = (nuovaRotta) => {\n    listaRottePrecedenti.push(nuovaRotta);\n  };\n\n  console.log(corsi.tabella);\n  return (\n    <Contenitore>\n      <h2>Ecco le ultime novità</h2>\n      {corsi.nodoPrincipale.map((nodo, key) => {\n        if (corsi.tabella[nodo].news === \"y\") {\n          const gestisciPreferito = (evento) => {\n            evento.stopPropagation();\n            contestoUtente.togglePreferito(nodo);\n          };\n          return (\n            <Card className=\"card\" id={key}>\n              <CardHeader\n                title={corsi.tabella[nodo].nome}\n                subheader={\"Durata: \" + corsi.tabella[nodo].durata}\n              />\n              <CardMedia\n                className=\"card-media\"\n                image={corsi.tabella[nodo].foto}\n              />\n              <CardContent className=\"programma\">\n                <Truncate lines={3} ellipsis={<span>...</span>}>\n                  <div\n                    dangerouslySetInnerHTML={{\n                      __html: corsi.tabella[nodo].programma,\n                    }}\n                  ></div>\n                </Truncate>\n\n                <div>\n                  <Button\n                    onClick={() =>\n                      cambiaRotta(ROTTE.DETTAGLIO_CORSO + \"/\" + nodo)\n                    }\n                  >\n                    Visualizza corso\n                  </Button>\n                </div>\n              </CardContent>\n              {contestoUtente?.utente?.loggato && (\n                <CardActions disableSpacing>\n                  <IconButton onClick={(evento) => gestisciPreferito(evento)}>\n                    {contestoUtente.isPreferito(nodo) ? (\n                      <FavoriteIcon\n                        htmlColor={colors.mainOrange}\n                        className=\"cuorePieno\"\n                      />\n                    ) : (\n                      <FavoriteBorderIcon\n                        htmlColor={colors.mainOrange}\n                        className=\"cuorePieno\"\n                      />\n                    )}\n                  </IconButton>\n                </CardActions>\n              )}\n              {!contestoUtente?.utente?.loggato && (\n                <div className=\"contenitoreBtnFalso\">\n                  <div\n                    className=\"preferitiFalso\"\n                    onClick={() => gestisciFrase()}\n                  >\n                    <FavoriteBorderIcon\n                      htmlColor={colors.mainOrange}\n                      className=\"cuoreFinto\"\n                    />\n                  </div>\n                  <div className=\"frase\">{frase}</div>\n                </div>\n              )}\n            </Card>\n          );\n        }\n      })}\n    </Contenitore>\n  );\n};\n\nconst Contenitore = styled.div`\n  padding: 10px;\n  .card {\n    width: 350px;\n    margin-bottom: 30px;\n  }\n  .card-media {\n    height: 0;\n    padding-top: 56.25%;\n  }\n  .programma {\n    text-align: left;\n    font-size: 14px;\n    color: grey;\n  }\n`;\nexport default NuoviCorsi;\n","/Users/danilo/Documents/projects/AccademiaAnja/src/containers/Master.js",["120","121","122","123","124","125"],"import { useContext, useState, useEffect } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { ROTTE } from \"../costanti\";\nimport { corsiContext } from \"../containers/App\";\nimport styled from \"styled-components\";\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Button from \"@material-ui/core/Button\";\nimport Truncate from \"react-truncate\";\n\nimport { colors } from \"../global-styles\";\n\nimport CardActions from \"@material-ui/core/CardActions\";\nimport { UtenteContext } from \"../containers/App\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\";\n\nconst Master = () => {\n  const [mostraFrase, setMostraFrase] = useState(false);\n  const [frase, setFrase] = useState(\"\");\n  const gestisciFrase = () => {\n    if (mostraFrase) {\n      setFrase(\"\");\n      setMostraFrase(false);\n    } else {\n      setFrase(\"per usare i preferiti devi essere loggato!\");\n      setMostraFrase(true);\n    }\n  };\n\n  const corsi = useContext(corsiContext);\n  const contestoUtente = useContext(UtenteContext);\n\n  // costanti per gli Hook di Routing\n  const listaRottePrecedenti = useHistory();\n  const rottaCorrente = useLocation();\n\n  const cambiaRotta = (nuovaRotta) => {\n    listaRottePrecedenti.push(nuovaRotta);\n  };\n\n  const [pippo, setPippo] = useState(false);\n  const [pluto, setPluto] = useState(11);\n  const [testobtn, setTestobtn] = useState(\"mostra\");\n\n  let prova = {\n    testo: \"mimmo\",\n  };\n\n  const cambiaPippo = () => {\n    if (pippo) {\n      setPippo(false);\n      setTestobtn(\"mostra\");\n      prova.testo = \"mimmo2\";\n    } else {\n      setPippo(true);\n      setTestobtn(\"nascondi\");\n      prova[\"testo\"] = \"danilo\";\n    }\n  };\n\n  // useEffect(() => {\n  //   setPippo(false);\n  //   return () => {\n  //     setPippo(true);\n  //     console.log(pippo);\n  //   }\n  // }, [setProva])\n\n  return (\n    <Contenitore>\n      <h1>I NOSTRI MASTER:</h1>\n      {\n        //nodo.slice(0,3).map((nodo) => {\n        corsi.nodoPrincipale.map((nodo, key) => {\n          const gestisciPreferito = (evento) => {\n            evento.stopPropagation();\n            contestoUtente.togglePreferito(nodo);\n          };\n\n          if (corsi.tabella[nodo].master === true) {\n            return (\n              <Card className=\"card\" id={key}>\n                <CardHeader\n                  title={corsi.tabella[nodo].nome}\n                  subheader={\"Durata: \" + corsi.tabella[nodo].durata}\n                />\n                <CardMedia\n                  className=\"card-media\"\n                  image={corsi.tabella[nodo].foto}\n                />\n                <CardContent className=\"programma\">\n                  <Truncate width=\"1000\">\n                    <div\n                      dangerouslySetInnerHTML={{\n                        __html: corsi.tabella[nodo].programma,\n                      }}\n                    />\n                  </Truncate>\n                  <div>\n                    <Button\n                      onClick={() =>\n                        cambiaRotta(ROTTE.DETTAGLIO_CORSO + \"/\" + nodo)\n                      }\n                    >\n                      Visualizza corso\n                    </Button>\n                  </div>\n                </CardContent>\n                {contestoUtente?.utente?.loggato && (\n                  <CardActions disableSpacing>\n                    <IconButton onClick={(evento) => gestisciPreferito(evento)}>\n                      {contestoUtente.isPreferito(nodo) ? (\n                        <FavoriteIcon\n                          htmlColor={colors.mainOrange}\n                          className=\"cuorePieno\"\n                        />\n                      ) : (\n                        <FavoriteBorderIcon\n                          htmlColor={colors.mainOrange}\n                          className=\"cuorePieno\"\n                        />\n                      )}\n                    </IconButton>\n                  </CardActions>\n                )}\n                {!contestoUtente?.utente?.loggato && (\n                  <div className=\"contenitoreBtnFalso\">\n                    <div\n                      className=\"preferitiFalso\"\n                      onClick={() => gestisciFrase()}\n                    >\n                      <FavoriteBorderIcon\n                        htmlColor={colors.mainOrange}\n                        className=\"cuoreFinto\"\n                      />\n                    </div>\n                    <div className=\"frase\">{frase}</div>\n                  </div>\n                )}\n              </Card>\n            );\n          } else {\n            return null;\n          }\n        })\n      }\n    </Contenitore>\n  );\n};\n\nconst Contenitore = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  padding: 10px;\n  justify-content: center;\n  margin-top: 50px;\n  margin-bottom: 30px;\n  h1 {\n    display: block;\n    width: 100%;\n    text-align: center;\n  }\n  h2 {\n    width: 100%;\n    text-align: center;\n    color: #4d7ae0;\n  }\n  .card {\n    width: 350px;\n    margin: 20px;\n    margin-bottom: 30px;\n  }\n  .card-media {\n    height: 0;\n    padding-top: 56.25%;\n  }\n  .programma {\n    text-align: left;\n    font-size: 14px;\n    color: grey;\n  }\n`;\nexport default Master;\n","/Users/danilo/Documents/projects/AccademiaAnja/src/containers/Corsi.js",["126","127"],"/Users/danilo/Documents/projects/AccademiaAnja/src/containers/Contatti.js",["128"],"import styled from \"styled-components\";\nimport mappa from \"../img/mappa-anja.jpg\";\n\nconst Contatti = () => {\n  return (\n    <Contenitore>\n      <h2>Accademia Anja</h2>\n      <div>\n        Via Alberto Einstein 13\n        <br />\n        scala E, interno 1<br />\n        00146, Roma\n        <br /><br />\n        Adiacenze »<br />\n        V.le Marconi/Staz. Trastevere\n        <br />\n        Email : info@anja.it\n        <br />\n        Pec: accademia-anja@pec.it\n        <br />\n        TEL. <strong>06.393.700.73</strong>\n        <br />\n        MOBILE & WHATSAPP. <strong>391.40.98.575</strong>\n        <br />\n        <img src={mappa} className=\"mappa\" />\n        <p>\n        La nostra segreteria è aperta dal lunedì al venerdì con i seguenti\n        orari:\n        <br />\n        <strong>mattina:</strong> dalle 10.00 alle 13.00.\n        <br />\n        <strong>pomeriggio:</strong> dalle 16.00 alle 19.00.\n        <br />\n        <span className=\"sottoTitolo\">(Non è necessario prendere un appuntamento, ma è sempre gradito.)</span>\n        <br />\n        </p>\n     \n      </div>\n    </Contenitore>\n  );\n};\n\nconst Contenitore = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  padding: 40px;\n  padding-top:100px;\n  justify-content: center;\n  .mappa {\n    width: 100%;\n    border: 2px solid black;\n    margin-top: 30px;\n  }\n  h2{\n    margin-top:-20px;\n  }\n  p{\n    font-size:0.8em;\n  }\n  .sottoTitolo{\n    color:grey;\n    text-align:center;\n    width:100%;\n    display:inline-block;\n    margin-top:10px;\n  }\n`;\n\nexport default Contatti;\n","/Users/danilo/Documents/projects/AccademiaAnja/src/containers/PrimoAccesso.js",[],"/Users/danilo/Documents/projects/AccademiaAnja/src/components/Footer.js",["129"],"import { useState } from \"react\";\nimport {\n    useHistory,\n    useLocation,\n  } from \"react-router-dom\";\n  import {ROTTE} from '../costanti';\n\nimport BottomNavigation from \"@material-ui/core/BottomNavigation\";\nimport BottomNavigationAction from \"@material-ui/core/BottomNavigationAction\";\nimport SchoolIcon from '@material-ui/icons/School';\nimport HomeIcon from \"@material-ui/icons/Home\";\nimport LocationOnIcon from \"@material-ui/icons/LocationOn\";\n\nconst Footer = (props) => {\n// costanti per gli Hook di Routing\nconst listaRottePrecedenti = useHistory();\n const cambiaRotta = (nuovaRotta) => {\n   listaRottePrecedenti.push(nuovaRotta);\n };\n\n  const [value, setValue] = useState(\"home\");\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  return (\n      \n    <BottomNavigation value={value} onChange={handleChange}>\n      <BottomNavigationAction value=\"home\" icon={<HomeIcon />} label=\"home\" onClick={()=> cambiaRotta(ROTTE.HOME)}/>\n      <BottomNavigationAction value=\"master\" icon={<SchoolIcon />} label=\"master\" onClick={()=> cambiaRotta(ROTTE.MASTER)}/>\n      <BottomNavigationAction value=\"contatti\" icon={<LocationOnIcon />} label=\"contatti\" onClick={()=>cambiaRotta(ROTTE.CONTATTI)}/>\n    </BottomNavigation>\n  );\n};\n\nexport default Footer;\n","/Users/danilo/Documents/projects/AccademiaAnja/src/containers/Certificazioni.js",[],"/Users/danilo/Documents/projects/AccademiaAnja/src/containers/Offerte.js",[],"/Users/danilo/Documents/projects/AccademiaAnja/src/containers/DettaglioCorso.js",["130"],"import { useContext, useEffect, useState} from \"react\";\nimport { corsiContext } from \"./App\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { colors, breakpoints } from \"../global-styles\";\nimport styled from \"styled-components\";\nimport Card from \"@material-ui/core/Card\";\n\n\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport CardContent from \"@material-ui/core/CardContent\";\n\nimport CardActions from \"@material-ui/core/CardActions\";\nimport { UtenteContext } from \"../containers/App\";\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\n\n\nimport ArrowBackIosRoundedIcon from '@material-ui/icons/ArrowBackIosRounded';\n\nimport {\n  WhatsappShareButton,\n  EmailShareButton,\n  FacebookShareButton,\n  WhatsappIcon,\n  EmailIcon,\n  FacebookIcon\n } from \"react-share\";\n\n import { Menu, IconButton } from \"@material-ui/core\";\nimport { Share } from \"@material-ui/icons\";\n\n\n\n\nconst Corso = () => {\n\n  const [mostraFrase, setMostraFrase]=useState(false);\n  const [frase, setFrase]=useState(\"\");\n  const gestisciFrase = () =>{\n    if(mostraFrase){\n      setFrase(\"\");\n      setMostraFrase(false);\n    }else{\n      setFrase(\"per usare i preferiti devi essere loggato!\");\n      setMostraFrase(true);\n    }\n  }\n  const [apriChiudShareMenu, setApriChiudiShareMenu] = useState(null);\n\n  // in questo modo mi parte la pagina dall'alto su y\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, []);\n\n  const contestoCorso = useContext(corsiContext);\n  const contestoUtente = useContext(UtenteContext);\n\n  const { chiave } = useParams();\n  const corso = contestoCorso.tabella[chiave];\n\n  const history = useHistory();\n\n const gestisciPreferito = () =>{\n    contestoUtente.togglePreferito(chiave);\n  };\n  return (\n    <Contenitore>\n            <Card className=\"card\">\n            \n              <CardMedia className=\"card-media\" image={corso?.foto} />\n\n              <IconButton\n            className=\"share btn\"\n            aria-label=\"condivi\"\n            onClick={(e) => setApriChiudiShareMenu(e.currentTarget)}\n          >\n            <Share htmlColor={colors.mainOrange} />\n          </IconButton>\n          <Menu\n            id=\"share-menu\"\n            className=\"share-menu\"\n            keepMounted\n            anchorEl={apriChiudShareMenu}\n            open={Boolean(apriChiudShareMenu)}\n            onClose={() => setApriChiudiShareMenu(null)}\n          >\n            <WhatsappShareButton\n              // title={ricetta?.name + \": \"}\n              title={`Ciao, dai un occhiata a questo corso, *${corso?.nome}* : `}\n              url={window.location.href}\n              children={\n                <WhatsappIcon className=\"share-btn\" size={32} round={true} />\n              } // si occupa di mostrare l'elemento che gli andiamo ad inserire dentro\n            />\n            <FacebookShareButton\n              quote={`Ciao, dai un occhiata a questa corso, ${corso?.nome} : `}\n              url={window.location.href}\n              children={\n                <FacebookIcon className=\"share-btn\" size={32} round={true} />\n              } \n            />\n            <EmailShareButton\n              title={`Ciao, dai un occhiata a questa corso, ${corso?.nome} : `}\n              url={window.location.href}\n              children={\n                <EmailIcon className=\"share-btn\" size={32} round={true} />\n              } \n            />\n          </Menu>\n               <div className=\"CardTitolo\">{corso?.nome}</div>\n               <div className=\"CardSottoTitolo\">{corso?.durata}</div>\n              <CardContent className=\"programma\">\n                <div\n                  dangerouslySetInnerHTML={{ __html: corso?.programma }}\n                ></div>\n\n                  {contestoUtente?.utente?.loggato && ( \n                    <CardActions disableSpacing>\n        <IconButton onClick={()=> gestisciPreferito()}>\n              {contestoUtente.isPreferito(chiave) ? <FavoriteIcon htmlColor={colors.mainOrange} className=\"cuorePieno\"/> : <FavoriteBorderIcon htmlColor={colors.mainOrange} className=\"cuorePieno\" />}\n          </IconButton>\n          </CardActions>\n        )}\n        {!contestoUtente?.utente?.loggato && (\n          <div className=\"contenitoreBtnFalso\">\n            <div className=\"preferitiFalso\" onClick={() => gestisciFrase()}>\n                <FavoriteBorderIcon htmlColor={colors.mainOrange} className=\"cuoreFinto\" />\n          </div>\n          <div className=\"frase\">{frase}</div>\n        </div>\n        )}\n              </CardContent>\n            <ArrowBackIosRoundedIcon onClick={() => {history.goBack();}} className=\"tornaIndietro\"/>\n            </Card>\n          \n    </Contenitore>\n  );\n};\n\nconst Contenitore = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  padding: 0px;\n  justify-content: center;\n        @media only screen and (min-width: ${breakpoints.screenMobBig} ){\n          padding: 30px;\n                  }\n\n \n .CardTitolo {\n    color: ${colors.titolo}!important;\n    font-size: 23px!important;\n    font-weight: bold;\n    padding-left: 10px;\n}\n.CardSottoTitolo {\n    color: ${colors.sottoTitolo}!important;\n    font-size: 16px!important;\n    font-weight: normal;\n    padding-left: 10px;\n    margin-top:8px;\n}\n\n\n  .card {\n    width: 90%;\n    margin-bottom: 30px;\n    padding-bottom: 40px;\n    margin-top: 70px;\n    @media only screen and (min-width: ${breakpoints.screenMobBig} ){\n      width: 80%;\n      padding-bottom: 20px;\n\n            }\n  }\n  .card-media {\n    height: 0;\n    padding-top: 56.25%;\n  }\n  .btn{\n        position: relative;\n        background-color: white;\n        top: -29px;\n        left: 10px;\n        &.share {\n          right:106;\n        }\n\n      }\n      .btn:hover{\n        background-color: white!important;\n      }\n  .programma{\n    padding: 20px;\n  }\n  .programma p,span {\n    text-align: justify!important;\n    font-size: 15px!important;\n    color: grey!important;\n  }\n  .tornaIndietro{\n    font-size: 30px;\n    color: ${colors.titolo};\n    margin-left: 20px;\n    border: 3px solid;\n    border-radius: 50%;\n    padding: 5px;\n  }\n\n  \n`;\nexport default Corso;\n","/Users/danilo/Documents/projects/AccademiaAnja/src/containers/Preferiti.js",["131","132","133"],"import { useContext } from \"react\";\nimport { useHistory, useLocation, Redirect} from \"react-router-dom\";\nimport { ROTTE } from \"../costanti\";\nimport { corsiContext, UtenteContext } from \"../containers/App\";\nimport styled, { keyframes } from \"styled-components\";\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Button from \"@material-ui/core/Button\";\nimport Truncate from \"react-truncate\";\n\nimport { colors } from \"../global-styles\";\n\nimport CardActions from \"@material-ui/core/CardActions\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\";\n\n\n \n \nconst Preferiti = () => {\n  const corsi = useContext(corsiContext);\n  const contestoUtente = useContext(UtenteContext);\n\n  // costanti per gli Hook di Routing\n  const listaRottePrecedenti = useHistory();\n  const rottaCorrente = useLocation();\n\n  const cambiaRotta = (nuovaRotta) => {\n    listaRottePrecedenti.push(nuovaRotta);\n  };\n\n  const corsiPreferiti = corsi?.nodoPrincipale.filter((chiave) => {\n    // in questo modo mi ciclo tutte le ricette e vado a verificare se ci sono dei preferiti\n    return contestoUtente.isPreferito(chiave); // tramite il metodo isPreferito, verifico se le ricette ciclate, sono tra nel nodo preferiti dell'utente, e se ci sono le assegno alla costante ricettePreferite\n  });\n\n  console.log(corsiPreferiti);\n\n  if (!contestoUtente.utente?.loggato) {\n    return (\n        <Redirect to={ROTTE.LOGIN} />\n    )\n   }\n\n  return (\n \n    \n    <Contenitore>\n \n      {\n        //nodo.slice(0,1).map((nodo) => {\n        corsiPreferiti.map((nodo, key) => {\n          const gestisciPreferito = (evento) => {\n            evento.stopPropagation();\n            contestoUtente.togglePreferito(nodo);\n          };\n          return (\n            <Card className=\"card\" id={key}>\n              <CardHeader\n                title={corsi.tabella[nodo].nome}\n                subheader={\"Durata: \" + corsi.tabella[nodo].durata}\n              />\n\n              <CardMedia\n                className=\"card-media\"\n                image={corsi.tabella[nodo].foto}\n              />\n              <CardContent className=\"programma\">\n                <Truncate lines={3} ellipsis={<span>...</span>}>\n                  <div\n                    dangerouslySetInnerHTML={{\n                      __html: corsi.tabella[nodo].programma,\n                    }}\n                  ></div>\n                </Truncate>\n                <div>\n                  <Button\n                    onClick={() =>\n                      cambiaRotta(ROTTE.DETTAGLIO_CORSO + \"/\" + nodo)\n                    }\n                  >\n                    Visualizza corso\n                  </Button>\n                </div>\n              </CardContent>\n              <CardActions disableSpacing>\n                <IconButton onClick={(evento) => gestisciPreferito(evento)}>\n                  {contestoUtente.isPreferito(nodo) ? (\n                    <FavoriteIcon\n                      htmlColor={colors.mainOrange}\n                      className=\"cuorePieno\"\n                    />\n                  ) : (\n                    <FavoriteBorderIcon\n                      htmlColor={colors.mainOrange}\n                      className=\"cuorePieno\"\n                    />\n                  )}\n                </IconButton>\n              </CardActions>\n            </Card>\n          );\n        })\n      }\n\n      {corsiPreferiti == 0 && \n        <div className=\"noPreferiti\">\n           <div>\n           Attualmente non ci sono preferiti\n           </div>\n        </div>\n    }\n    </Contenitore>\n  );\n    \n};\n\nconst Contenitore = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  padding: 30px;\n  padding-top: 80px;\n  justify-content: center;\n  .card {\n    width: 350px;\n    margin-bottom: 30px;\n  }\n  .card-media {\n    height: 0;\n    padding-top: 56.25%;\n  }\n  .programma {\n    text-align: left;\n    font-size: 14px;\n    color: grey;\n  }\n`;\nexport default Preferiti;\n","/Users/danilo/Documents/projects/AccademiaAnja/src/containers/Login.js",["134"],"import React, { useContext } from \"react\";\nimport styled from \"styled-components\";\nimport Lottie from \"react-lottie\";\nimport * as cuoreBatte from '../assets/lottie/cuore-che-batteAnja.json';\nimport * as registrati from '../assets/lottie/registrati.json';\n\n\nimport { UtenteContext } from './App';\n\nimport {Button} from \"@material-ui/core\";\nimport { colors, brackpoints } from \"../global-styles\";\n\n\nexport default function Login(props){\n\n    const configAnimazioneLoggato = {\n        loop: false,\n        autoplay: true,\n        animationData: cuoreBatte.default,\n        rendererSettings: {\n            preserveAspectRatio: 'xMidYMid slice'\n          }\n      };\n\n      const configAnimazioneRegistrati = {\n        loop: false,\n        autoplay: true,\n        animationData: registrati.default,\n        rendererSettings: {\n            preserveAspectRatio: 'xMidYMid slice'\n          }\n      };\n     \n    const utenteContesto = useContext(UtenteContext);\n\n    if (utenteContesto.utente?.loggato) {\n        return (\n          <Contenitore>\n            <div className=\"loginHeader\">\n              <h1>Benvenuti nell'app dell'Accademia Anja!</h1>\n                <div className=\"animazione\">\n                <Lottie options={configAnimazioneLoggato}/>\n                </div>\n              <div className=\"loginSubheader\">\n                Naviga e scopri tutti i corsi che fanno al caso tuo!\n              </div>\n            </div>\n          </Contenitore>\n        );\n      }\n     \n      return (\n        <Contenitore>\n          <div className=\"loginHeader\">\n         <h1>Accademia Anja!</h1>\n            Accedi per avere sempre a portata di click i tuoi corsi preferiti\n            <div className=\"animazioneReg\">\n                <Lottie options={configAnimazioneRegistrati}/>\n                </div>\n          <Button className=\"sign-in\" onClick={() => props.loggatiConGoogle()}>\n            Accedi con Google\n          </Button>\n          </div>\n        </Contenitore>\n      );\n     \n};\n\nconst Contenitore = styled.div`\ndisplay: flex;\n  flex-wrap: wrap;\n  padding: 30px;\n  padding-top: 80px;\n  justify-content: center;\n  margin-bottom: 30px;\n  .loginHeader{\n      display:flex;\n      align-items:center;\n      justify-content:center;\n      flex-direction: column;\n      height:50vh;\n      text-align:center;\n      h1{\n      color: ${colors.titolo};\n      \n  }\n  .animazione{\n      display:flex;\n      width:40%;\n  }\n  .animazioneReg{\n      display:flex;\n      width:20%;\n      margin-top:50px;\n  }\n  .loginSubheader{\n      font-size:17px;\n      \n  }\n  .sign-in{\n      margin-top:0px;\n      font-size:16px;\n      font-weight:bold;\n  }\n  }\n \n`;\n\n","/Users/danilo/Documents/projects/AccademiaAnja/src/utils/filtri.js",[],"/Users/danilo/Documents/projects/AccademiaAnja/src/components/MiniaturaCorso.js",["135","136","137","138","139"],"import { useContext, useState, useEffect } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { ROTTE } from \"../costanti\";\nimport { corsiContext } from \"../containers/App\";\nimport styled from \"styled-components\";\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Button from \"@material-ui/core/Button\";\nimport Truncate from \"react-truncate\";\n\nimport { colors } from \"../global-styles\";\n\nimport CardActions from \"@material-ui/core/CardActions\";\nimport { UtenteContext } from \"../containers/App\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\";\n\n\nconst MiniaturaCorso = (props) => {\n    const [mostraFrase, setMostraFrase] = useState(false);\n  const [frase, setFrase] = useState(\"\");\n  const gestisciFrase = () => {\n    if (mostraFrase) {\n      setFrase(\"\");\n      setMostraFrase(false);\n    } else {\n      setFrase(\"per usare i preferiti devi essere loggato!\");\n      setMostraFrase(true);\n    }\n  };\n\n  const corsi = useContext(corsiContext);\n  const contestoUtente = useContext(UtenteContext);\n\n  // costanti per gli Hook di Routing\n  const listaRottePrecedenti = useHistory();\n  const rottaCorrente = useLocation();\n\n  const cambiaRotta = (nuovaRotta) => {\n    listaRottePrecedenti.push(nuovaRotta);\n  };\n  const gestisciPreferito = (evento) =>{\n    evento.stopPropagation();\n    contestoUtente.togglePreferito(props.chiave);\n  };\n\n  const gestisciListaSpesa = (evento) =>{\n    evento.stopPropagation();\n    contestoUtente.toggleElemInListaSpesa(props.chiave);\n  };\nreturn(\n\n  <Card className=\"card\">\n  <CardHeader\n    title={props.nome}\n    subheader={\"Durata: \" + props.durata}\n  />\n  <CardMedia\n    className=\"card-media\"\n    image={props.foto}\n  />\n  <CardContent className=\"programma\">\n    <Truncate width=\"1000\">\n      <div\n        dangerouslySetInnerHTML={{\n          __html: props.programma,\n        }}\n      />\n    </Truncate>\n    <div>\n      <Button\n        onClick={() =>\n          cambiaRotta(ROTTE.DETTAGLIO_CORSO + \"/\" + props.chiave)\n        }\n      >\n        Visualizza corso\n      </Button>\n    </div>\n  </CardContent>\n  {contestoUtente?.utente?.loggato && (\n    <CardActions disableSpacing>\n      <IconButton onClick={(evento) => gestisciPreferito(evento)}>\n        {contestoUtente.isPreferito(props.chiave) ? (\n          <FavoriteIcon\n            htmlColor={colors.mainOrange}\n            className=\"cuorePieno\"\n          />\n        ) : (\n          <FavoriteBorderIcon\n            htmlColor={colors.mainOrange}\n            className=\"cuorePieno\"\n          />\n        )}\n      </IconButton>\n    </CardActions>\n  )}\n  {!contestoUtente?.utente?.loggato && (\n    <div className=\"contenitoreBtnFalso\">\n      <div\n        className=\"preferitiFalso\"\n        onClick={() => gestisciFrase()}\n      >\n        <FavoriteBorderIcon\n          htmlColor={colors.mainOrange}\n          className=\"cuoreFinto\"\n        />\n      </div>\n      <div className=\"frase\">{frase}</div>\n    </div>\n  )}\n</Card>\n)\n};\n\nconst Contenitore = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  padding: 10px;\n  justify-content: center;\n  margin-top: 50px;\n  margin-bottom: 30px;\n  h1 {\n    display: block;\n    width: 100%;\n    text-align: center;\n  }\n  h2 {\n    width: 100%;\n    text-align: center;\n    color: #4d7ae0;\n  }\n  .card {\n    width: 350px;\n    margin: 20px;\n    margin-bottom: 30px;\n  }\n  .card-media {\n    height: 0;\n    padding-top: 56.25%;\n  }\n  .programma {\n    text-align: left;\n    font-size: 14px;\n    color: grey;\n  }\n`;\n\nexport default MiniaturaCorso;","/Users/danilo/Documents/projects/AccademiaAnja/src/containers/CercaCorsi.js",["140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157"],"import { useContext, useState, useEffect } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { corsiContext, UtenteContext } from \"./App\";\nimport { colors, breakpoints } from \"../global-styles\";\nimport MiniaturaCorso from \"../components/MiniaturaCorso\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { ROTTE } from \"../costanti\";\n\nimport styled, { keyframes } from \"styled-components\";\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Button from \"@material-ui/core/Button\";\nimport Truncate from \"react-truncate\";\n\nimport CardActions from \"@material-ui/core/CardActions\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\";\n\nimport { normalizzaCorsi, filtra } from \"../utils/filtri\";\n\nconst Corso = () => {\n  const contestoUtente = useContext(UtenteContext);\n  const corsiContesto = useContext(corsiContext);\n  const { tabella } = corsiContesto;\n\n  const [corsiNormalizzateArray, setCorsiNormalizzateArray] = useState([]);\n  const [corsiFiltrati, setCorsiFiltrati] = useState([]);\n  const [barraRicercaInput, setbarraRicercaInput] = useState(null);\n\n  const [buttonCerca, setButtonCerca] = useState(null);\n  const [visualizza, setVisualizza] = useState(false);\n\n  const onChangeBarraRicerca = (evento) => {\n    setbarraRicercaInput(evento.target.value);\n  };\n\n  const pulsantePremuto = () => {\n    setButtonCerca(barraRicercaInput);\n    setVisualizza(true);\n  };\n\n  useEffect(() => {\n    const newCorsiNormalizzate = normalizzaCorsi(tabella);\n    setCorsiNormalizzateArray(newCorsiNormalizzate);\n    setCorsiFiltrati(newCorsiNormalizzate);\n  }, [tabella]);\n\n  useEffect(() => {\n    if (barraRicercaInput) {\n      const newCorsiFiltrati = filtra(\n        barraRicercaInput,\n        corsiNormalizzateArray\n      ); // cosi facendo passo al metodo filtra quello che verrà scritto nella barra di ricerca e tutte le ricette normalizzate, e l'assegno a newRicetteFiltrate\n      setCorsiFiltrati(newCorsiFiltrati); // imposto setRicetteFiltrate con quello che dice il filtraggio\n    }\n  }, [buttonCerca]);\n\n  const [mostraFrase, setMostraFrase] = useState(false);\n  const [frase, setFrase] = useState(\"\");\n  const gestisciFrase = () => {\n    if (mostraFrase) {\n      setFrase(\"\");\n      setMostraFrase(false);\n    } else {\n      setFrase(\"per usare i preferiti devi essere loggato!\");\n      setMostraFrase(true);\n    }\n  };\n  // costanti per gli Hook di Routing\n  const listaRottePrecedenti = useHistory();\n  const rottaCorrente = useLocation();\n\n  const cambiaRotta = (nuovaRotta) => {\n    listaRottePrecedenti.push(nuovaRotta);\n  };\n\n  return (\n    <Contenitore>\n      <div className=\"searchbar-container\">\n        <div className=\"search-icon-wrapper\">\n          <SearchIcon />\n        </div>\n        <input\n          type=\"text\"\n          className=\"search-field\"\n          id=\"addInput\"\n          placeholder=\"Cerca un corso\"\n          onChange={(evento) => onChangeBarraRicerca(evento)}\n        />\n        <button onClick={() => pulsantePremuto()}>Cerca</button>\n      </div>\n      {visualizza &&\n        corsiFiltrati.map((corsoNormalizzato) => (\n          <MiniaturaCorso\n            chiave={corsoNormalizzato.id}\n            key={corsoNormalizzato.id}\n            nome={corsiContesto.tabella[corsoNormalizzato.id].nome}\n            foto={corsiContesto.tabella[corsoNormalizzato.id].foto}\n            prezzo={corsiContesto.tabella[corsoNormalizzato.id]?.prezzo}\n            durata={corsiContesto.tabella[corsoNormalizzato.id].durata}\n            programma={corsiContesto.tabella[corsoNormalizzato.id].programma}\n          />\n        ))}\n\n      {corsiFiltrati.length === 0 && (\n        <div>Mi spiace non ci sono corsi che rispecchiano la tua ricerca</div>\n      )}\n    </Contenitore>\n  );\n};\n\nconst Contenitore = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  padding: 30px;\n  padding-top: 80px;\n  justify-content: center;\n  margin-bottom: 30px;\n  .card {\n    width: 100%;\n    margin-bottom: 30px;\n  }\n  .card-media {\n    height: 0;\n    padding-top: 56.25%;\n  }\n  .programma {\n    text-align: left;\n    font-size: 14px;\n    color: grey;\n  }\n  .pagination {\n    display: flex;\n    justify-content: center;\n  }\n  .searchbar-container {\n    background-color: #eeeeee;\n    max-width: 500px;\n    display: flex;\n    padding: 8px 12px;\n    border-radius: 4px;\n    margin: 20px auto;\n    .search-icon-wrapper {\n      display: inline-flex;\n    }\n    .search-field {\n      display: inline-flex;\n      border: none;\n      width: 88%;\n      background: transparent;\n      margin-left: 20px;\n    }\n  }\n  .search-container {\n    width: 100%;\n    display: flex;\n    padding: 20px 0px;\n    justify-content: space-between;\n    flex-direction: column;\n    @media only screen and (min-width: ${breakpoints.screenMobBig}) {\n      width: 100%;\n      flex-direction: row;\n    }\n    .search-fields-container {\n      width: 100%;\n      display: flex;\n      flex-wrap: wrap;\n      flex-direction: row;\n      margin-bottom: 45px;\n      @media only screen and (min-width: ${breakpoints.screenMobBig}) {\n        flex-wrap: nowrap;\n        flex-direction: column;\n        width: 20%;\n        max-width: 300px;\n        margin-bottom: 0px;\n      }\n      .search-fields-accordion-container {\n        width: 100%;\n        .MuiAccordionDetails-root {\n          display: block;\n          padding: 0;\n        }\n        .MuiAccordionSummary-content {\n          margin: 0px;\n        }\n        .MuiAccordionSummary-root {\n          padding: 0px;\n          min-height: 30px;\n        }\n        .search-fields-header {\n          display: flex;\n          justify-content: space-between;\n          margin-bottom: 15px;\n          margin-top: 15px;\n          width: 100%;\n          .search-fields-title {\n            font-weight: bold;\n          }\n          .search-fields-clear-btn {\n            color: ${colors.mainRed};\n            font-size: 11px;\n            cursor: pointer;\n          }\n        }\n        fieldset {\n          margin-top: 20px;\n          width: 100%;\n          @media only screen and (min-width: ${breakpoints.screenMobMid}) {\n            width: 33%;\n          }\n          @media only screen and (min-width: ${breakpoints.screenMobBig}) {\n            width: 100%;\n          }\n          .Mui-focused {\n            color: ${colors.mainRed};\n          }\n          .Mui-checked {\n            color: ${colors.mainRed};\n          }\n        }\n      }\n    }\n    .search-results-container {\n      display: flex;\n      justify-content: space-between;\n      flex-direction: column;\n      align-items: center;\n      flex-wrap: wrap;\n      width: 100%;\n      @media only screen and (min-width: ${breakpoints.screenMobMid}) {\n        width: 100%;\n      }\n      @media only screen and (min-width: ${breakpoints.screenMobBig}) {\n        width: 80%;\n        flex-direction: row;\n        align-items: flex-start;\n        padding-left: 8%;\n      }\n      .recipe-preview-container {\n        width: 100%;\n        margin-bottom: 45px;\n        @media only screen and (min-width: ${breakpoints.screenMobMid}) {\n          width: 100%;\n        }\n        @media only screen and (min-width: ${breakpoints.screenMobBig}) {\n          width: 40%;\n          margin: 20px;\n        }\n        .recipe-preview-wrapper {\n          margin: 0 auto;\n        }\n      }\n    }\n  }\n`;\nexport default Corso;\n",{"ruleId":"158","replacedBy":"159"},{"ruleId":"160","replacedBy":"161"},{"ruleId":"162","severity":1,"message":"163","line":1,"column":10,"nodeType":"164","messageId":"165","endLine":1,"endColumn":18},{"ruleId":"162","severity":1,"message":"166","line":10,"column":8,"nodeType":"164","messageId":"165","endLine":10,"endColumn":14},{"ruleId":"162","severity":1,"message":"167","line":18,"column":9,"nodeType":"164","messageId":"165","endLine":18,"endColumn":22},{"ruleId":"168","severity":1,"message":"169","line":48,"column":17,"nodeType":"170","endLine":48,"endColumn":71},{"ruleId":"162","severity":1,"message":"171","line":13,"column":8,"nodeType":"164","messageId":"165","endLine":13,"endColumn":14},{"ruleId":"162","severity":1,"message":"172","line":30,"column":3,"nodeType":"164","messageId":"165","endLine":30,"endColumn":13},{"ruleId":"162","severity":1,"message":"173","line":77,"column":18,"nodeType":"164","messageId":"165","endLine":77,"endColumn":27},{"ruleId":"162","severity":1,"message":"174","line":100,"column":11,"nodeType":"164","messageId":"165","endLine":100,"endColumn":23},{"ruleId":"168","severity":1,"message":"169","line":245,"column":15,"nodeType":"170","endLine":245,"endColumn":50},{"ruleId":"162","severity":1,"message":"175","line":10,"column":8,"nodeType":"164","messageId":"165","endLine":10,"endColumn":22},{"ruleId":"162","severity":1,"message":"176","line":29,"column":9,"nodeType":"164","messageId":"165","endLine":29,"endColumn":14},{"ruleId":"162","severity":1,"message":"177","line":30,"column":9,"nodeType":"164","messageId":"165","endLine":30,"endColumn":16},{"ruleId":"168","severity":1,"message":"169","line":59,"column":33,"nodeType":"170","endLine":59,"endColumn":56},{"ruleId":"162","severity":1,"message":"167","line":38,"column":9,"nodeType":"164","messageId":"165","endLine":38,"endColumn":22},{"ruleId":"178","severity":1,"message":"179","line":49,"column":45,"nodeType":"180","messageId":"181","endLine":49,"endColumn":47},{"ruleId":"162","severity":1,"message":"182","line":1,"column":32,"nodeType":"164","messageId":"165","endLine":1,"endColumn":41},{"ruleId":"162","severity":1,"message":"167","line":39,"column":9,"nodeType":"164","messageId":"165","endLine":39,"endColumn":22},{"ruleId":"162","severity":1,"message":"183","line":46,"column":10,"nodeType":"164","messageId":"165","endLine":46,"endColumn":15},{"ruleId":"162","severity":1,"message":"184","line":46,"column":17,"nodeType":"164","messageId":"165","endLine":46,"endColumn":25},{"ruleId":"162","severity":1,"message":"185","line":47,"column":10,"nodeType":"164","messageId":"165","endLine":47,"endColumn":18},{"ruleId":"162","severity":1,"message":"186","line":53,"column":9,"nodeType":"164","messageId":"165","endLine":53,"endColumn":20},{"ruleId":"162","severity":1,"message":"187","line":5,"column":18,"nodeType":"164","messageId":"165","endLine":5,"endColumn":27},{"ruleId":"162","severity":1,"message":"167","line":38,"column":9,"nodeType":"164","messageId":"165","endLine":38,"endColumn":22},{"ruleId":"168","severity":1,"message":"169","line":25,"column":9,"nodeType":"170","endLine":25,"endColumn":46},{"ruleId":"162","severity":1,"message":"188","line":4,"column":5,"nodeType":"164","messageId":"165","endLine":4,"endColumn":16},{"ruleId":"162","severity":1,"message":"189","line":9,"column":8,"nodeType":"164","messageId":"165","endLine":9,"endColumn":18},{"ruleId":"162","severity":1,"message":"187","line":5,"column":18,"nodeType":"164","messageId":"165","endLine":5,"endColumn":27},{"ruleId":"162","severity":1,"message":"167","line":29,"column":9,"nodeType":"164","messageId":"165","endLine":29,"endColumn":22},{"ruleId":"190","severity":1,"message":"191","line":109,"column":23,"nodeType":"192","messageId":"193","endLine":109,"endColumn":25},{"ruleId":"162","severity":1,"message":"194","line":11,"column":18,"nodeType":"164","messageId":"165","endLine":11,"endColumn":29},{"ruleId":"162","severity":1,"message":"182","line":1,"column":32,"nodeType":"164","messageId":"165","endLine":1,"endColumn":41},{"ruleId":"162","severity":1,"message":"176","line":35,"column":9,"nodeType":"164","messageId":"165","endLine":35,"endColumn":14},{"ruleId":"162","severity":1,"message":"167","line":40,"column":9,"nodeType":"164","messageId":"165","endLine":40,"endColumn":22},{"ruleId":"162","severity":1,"message":"195","line":50,"column":9,"nodeType":"164","messageId":"165","endLine":50,"endColumn":27},{"ruleId":"162","severity":1,"message":"196","line":118,"column":7,"nodeType":"164","messageId":"165","endLine":118,"endColumn":18},{"ruleId":"162","severity":1,"message":"197","line":7,"column":10,"nodeType":"164","messageId":"165","endLine":7,"endColumn":15},{"ruleId":"162","severity":1,"message":"187","line":9,"column":18,"nodeType":"164","messageId":"165","endLine":9,"endColumn":27},{"ruleId":"162","severity":1,"message":"198","line":10,"column":8,"nodeType":"164","messageId":"165","endLine":10,"endColumn":12},{"ruleId":"162","severity":1,"message":"189","line":11,"column":8,"nodeType":"164","messageId":"165","endLine":11,"endColumn":18},{"ruleId":"162","severity":1,"message":"199","line":12,"column":8,"nodeType":"164","messageId":"165","endLine":12,"endColumn":17},{"ruleId":"162","severity":1,"message":"200","line":13,"column":8,"nodeType":"164","messageId":"165","endLine":13,"endColumn":19},{"ruleId":"162","severity":1,"message":"201","line":14,"column":8,"nodeType":"164","messageId":"165","endLine":14,"endColumn":14},{"ruleId":"162","severity":1,"message":"202","line":15,"column":8,"nodeType":"164","messageId":"165","endLine":15,"endColumn":16},{"ruleId":"162","severity":1,"message":"203","line":17,"column":8,"nodeType":"164","messageId":"165","endLine":17,"endColumn":19},{"ruleId":"162","severity":1,"message":"204","line":18,"column":8,"nodeType":"164","messageId":"165","endLine":18,"endColumn":18},{"ruleId":"162","severity":1,"message":"205","line":19,"column":8,"nodeType":"164","messageId":"165","endLine":19,"endColumn":20},{"ruleId":"162","severity":1,"message":"206","line":20,"column":8,"nodeType":"164","messageId":"165","endLine":20,"endColumn":26},{"ruleId":"162","severity":1,"message":"207","line":25,"column":9,"nodeType":"164","messageId":"165","endLine":25,"endColumn":23},{"ruleId":"208","severity":1,"message":"209","line":59,"column":6,"nodeType":"210","endLine":59,"endColumn":19,"suggestions":"211"},{"ruleId":"162","severity":1,"message":"212","line":62,"column":10,"nodeType":"164","messageId":"165","endLine":62,"endColumn":15},{"ruleId":"162","severity":1,"message":"213","line":63,"column":9,"nodeType":"164","messageId":"165","endLine":63,"endColumn":22},{"ruleId":"162","severity":1,"message":"167","line":74,"column":9,"nodeType":"164","messageId":"165","endLine":74,"endColumn":22},{"ruleId":"162","severity":1,"message":"214","line":76,"column":9,"nodeType":"164","messageId":"165","endLine":76,"endColumn":20},"no-native-reassign",["215"],"no-negated-in-lhs",["216"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Switch' is defined but never used.","'rottaCorrente' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Footer' is defined but never used.","'useHistory' is defined but never used.","'setPagina' is assigned a value but never used.","'preferitoRef' is assigned a value but never used.","'firebaseConfig' is defined but never used.","'corsi' is assigned a value but never used.","'baseUrl' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'useEffect' is defined but never used.","'pluto' is assigned a value but never used.","'setPluto' is assigned a value but never used.","'testobtn' is assigned a value but never used.","'cambiaPippo' is assigned a value but never used.","'keyframes' is defined but never used.","'useLocation' is defined but never used.","'CardHeader' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'brackpoints' is defined but never used.","'gestisciListaSpesa' is assigned a value but never used.","'Contenitore' is assigned a value but never used.","'ROTTE' is defined but never used.","'Card' is defined but never used.","'CardMedia' is defined but never used.","'CardContent' is defined but never used.","'Button' is defined but never used.","'Truncate' is defined but never used.","'CardActions' is defined but never used.","'IconButton' is defined but never used.","'FavoriteIcon' is defined but never used.","'FavoriteBorderIcon' is defined but never used.","'contestoUtente' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'barraRicercaInput' and 'corsiNormalizzateArray'. Either include them or remove the dependency array.","ArrayExpression",["217"],"'frase' is assigned a value but never used.","'gestisciFrase' is assigned a value but never used.","'cambiaRotta' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"218","fix":"219"},"Update the dependencies array to be: [barraRicercaInput, buttonCerca, corsiNormalizzateArray]",{"range":"220","text":"221"},[2320,2333],"[barraRicercaInput, buttonCerca, corsiNormalizzateArray]"]